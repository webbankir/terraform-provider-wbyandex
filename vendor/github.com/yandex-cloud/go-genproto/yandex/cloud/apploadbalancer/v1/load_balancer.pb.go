// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: yandex/cloud/apploadbalancer/v1/load_balancer.proto

package apploadbalancer

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LoadBalancer_Status int32

const (
	LoadBalancer_STATUS_UNSPECIFIED LoadBalancer_Status = 0
	// Application load balancer is being created.
	LoadBalancer_CREATING LoadBalancer_Status = 1
	// Application load balancer is being started.
	LoadBalancer_STARTING LoadBalancer_Status = 2
	// Application load balancer is active and sends traffic to the targets.
	LoadBalancer_ACTIVE LoadBalancer_Status = 3
	// Application load balancer is being stopped.
	LoadBalancer_STOPPING LoadBalancer_Status = 4
	// Application load balancer is stopped and doesn't send traffic to the targets.
	LoadBalancer_STOPPED LoadBalancer_Status = 5
	// Application load balancer is being deleted.
	LoadBalancer_DELETING LoadBalancer_Status = 6
)

// Enum value maps for LoadBalancer_Status.
var (
	LoadBalancer_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "CREATING",
		2: "STARTING",
		3: "ACTIVE",
		4: "STOPPING",
		5: "STOPPED",
		6: "DELETING",
	}
	LoadBalancer_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"CREATING":           1,
		"STARTING":           2,
		"ACTIVE":             3,
		"STOPPING":           4,
		"STOPPED":            5,
		"DELETING":           6,
	}
)

func (x LoadBalancer_Status) Enum() *LoadBalancer_Status {
	p := new(LoadBalancer_Status)
	*p = x
	return p
}

func (x LoadBalancer_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadBalancer_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_enumTypes[0].Descriptor()
}

func (LoadBalancer_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_enumTypes[0]
}

func (x LoadBalancer_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadBalancer_Status.Descriptor instead.
func (LoadBalancer_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{0, 0}
}

type TargetState_Status int32

const (
	TargetState_STATUS_UNSPECIFIED TargetState_Status = 0
	TargetState_HEALTHY            TargetState_Status = 1
	TargetState_PARTIALLY_HEALTHY  TargetState_Status = 2
	TargetState_UNHEALTHY          TargetState_Status = 3
	TargetState_DRAINING           TargetState_Status = 4
	TargetState_TIMEOUT            TargetState_Status = 5
)

// Enum value maps for TargetState_Status.
var (
	TargetState_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "HEALTHY",
		2: "PARTIALLY_HEALTHY",
		3: "UNHEALTHY",
		4: "DRAINING",
		5: "TIMEOUT",
	}
	TargetState_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"HEALTHY":            1,
		"PARTIALLY_HEALTHY":  2,
		"UNHEALTHY":          3,
		"DRAINING":           4,
		"TIMEOUT":            5,
	}
)

func (x TargetState_Status) Enum() *TargetState_Status {
	p := new(TargetState_Status)
	*p = x
	return p
}

func (x TargetState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_enumTypes[1].Descriptor()
}

func (TargetState_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_enumTypes[1]
}

func (x TargetState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetState_Status.Descriptor instead.
func (TargetState_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{16, 0}
}

// A LoadBalancer resource.
type LoadBalancer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. ID of the load balancer.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name is unique within the folder. 3-63 characters long.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the load balancer. 0-256 characters long.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the folder that the load balancer belongs to.
	FolderId string `protobuf:"bytes,4,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Resource labels as `key:value` pairs. Maximum of 64 per resource.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Status of the application load balancer.
	Status LoadBalancer_Status `protobuf:"varint,6,opt,name=status,proto3,enum=yandex.cloud.apploadbalancer.v1.LoadBalancer_Status" json:"status,omitempty"`
	// ID of the region that the load balancer located at.
	RegionId string `protobuf:"bytes,7,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// ID of the network that the load balancer located at.
	NetworkId string `protobuf:"bytes,8,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// List of listeners for the application load balancer.
	Listeners []*Listener `protobuf:"bytes,9,rep,name=listeners,proto3" json:"listeners,omitempty"`
	// Allocation sites for application load balancer instances.
	AllocationPolicy *AllocationPolicy `protobuf:"bytes,10,opt,name=allocation_policy,json=allocationPolicy,proto3" json:"allocation_policy,omitempty"`
	// Cloud log group used by the load balancer to store access logs.
	LogGroupId string `protobuf:"bytes,11,opt,name=log_group_id,json=logGroupId,proto3" json:"log_group_id,omitempty"`
	// ID's of security groups attached to the load balancer.
	SecurityGroupIds []string `protobuf:"bytes,12,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Creation timestamp for the load balancer.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *LoadBalancer) Reset() {
	*x = LoadBalancer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancer) ProtoMessage() {}

func (x *LoadBalancer) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancer.ProtoReflect.Descriptor instead.
func (*LoadBalancer) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{0}
}

func (x *LoadBalancer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LoadBalancer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadBalancer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LoadBalancer) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *LoadBalancer) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LoadBalancer) GetStatus() LoadBalancer_Status {
	if x != nil {
		return x.Status
	}
	return LoadBalancer_STATUS_UNSPECIFIED
}

func (x *LoadBalancer) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *LoadBalancer) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *LoadBalancer) GetListeners() []*Listener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (x *LoadBalancer) GetAllocationPolicy() *AllocationPolicy {
	if x != nil {
		return x.AllocationPolicy
	}
	return nil
}

func (x *LoadBalancer) GetLogGroupId() string {
	if x != nil {
		return x.LogGroupId
	}
	return ""
}

func (x *LoadBalancer) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *LoadBalancer) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Address:
	//	*Address_ExternalIpv4Address
	//	*Address_InternalIpv4Address
	//	*Address_ExternalIpv6Address
	Address isAddress_Address `protobuf_oneof:"address"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{1}
}

func (m *Address) GetAddress() isAddress_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (x *Address) GetExternalIpv4Address() *ExternalIpv4Address {
	if x, ok := x.GetAddress().(*Address_ExternalIpv4Address); ok {
		return x.ExternalIpv4Address
	}
	return nil
}

func (x *Address) GetInternalIpv4Address() *InternalIpv4Address {
	if x, ok := x.GetAddress().(*Address_InternalIpv4Address); ok {
		return x.InternalIpv4Address
	}
	return nil
}

func (x *Address) GetExternalIpv6Address() *ExternalIpv6Address {
	if x, ok := x.GetAddress().(*Address_ExternalIpv6Address); ok {
		return x.ExternalIpv6Address
	}
	return nil
}

type isAddress_Address interface {
	isAddress_Address()
}

type Address_ExternalIpv4Address struct {
	ExternalIpv4Address *ExternalIpv4Address `protobuf:"bytes,1,opt,name=external_ipv4_address,json=externalIpv4Address,proto3,oneof"`
}

type Address_InternalIpv4Address struct {
	InternalIpv4Address *InternalIpv4Address `protobuf:"bytes,2,opt,name=internal_ipv4_address,json=internalIpv4Address,proto3,oneof"`
}

type Address_ExternalIpv6Address struct {
	ExternalIpv6Address *ExternalIpv6Address `protobuf:"bytes,3,opt,name=external_ipv6_address,json=externalIpv6Address,proto3,oneof"`
}

func (*Address_ExternalIpv4Address) isAddress_Address() {}

func (*Address_InternalIpv4Address) isAddress_Address() {}

func (*Address_ExternalIpv6Address) isAddress_Address() {}

type ExternalIpv4Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ExternalIpv4Address) Reset() {
	*x = ExternalIpv4Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalIpv4Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalIpv4Address) ProtoMessage() {}

func (x *ExternalIpv4Address) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalIpv4Address.ProtoReflect.Descriptor instead.
func (*ExternalIpv4Address) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{2}
}

func (x *ExternalIpv4Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type InternalIpv4Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SubnetId string `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
}

func (x *InternalIpv4Address) Reset() {
	*x = InternalIpv4Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalIpv4Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalIpv4Address) ProtoMessage() {}

func (x *InternalIpv4Address) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalIpv4Address.ProtoReflect.Descriptor instead.
func (*InternalIpv4Address) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{3}
}

func (x *InternalIpv4Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *InternalIpv4Address) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

type ExternalIpv6Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ExternalIpv6Address) Reset() {
	*x = ExternalIpv6Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalIpv6Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalIpv6Address) ProtoMessage() {}

func (x *ExternalIpv6Address) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalIpv6Address.ProtoReflect.Descriptor instead.
func (*ExternalIpv6Address) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{4}
}

func (x *ExternalIpv6Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId   string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	SubnetId string `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// If set, will disable all L7 instances in the zone for request handling.
	DisableTraffic bool `protobuf:"varint,3,opt,name=disable_traffic,json=disableTraffic,proto3" json:"disable_traffic,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{5}
}

func (x *Location) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *Location) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *Location) GetDisableTraffic() bool {
	if x != nil {
		return x.DisableTraffic
	}
	return false
}

type AllocationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations []*Location `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *AllocationPolicy) Reset() {
	*x = AllocationPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationPolicy) ProtoMessage() {}

func (x *AllocationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationPolicy.ProtoReflect.Descriptor instead.
func (*AllocationPolicy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{6}
}

func (x *AllocationPolicy) GetLocations() []*Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

// A Listener resource.
type Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the listener. The name must be unique for each listener on a single load balancer. 3-63 characters long.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Network endpoints (addresses and ports) of the listener.
	Endpoints []*Endpoint `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// Types that are assignable to Listener:
	//	*Listener_Http
	//	*Listener_Tls
	Listener isListener_Listener `protobuf_oneof:"listener"`
}

func (x *Listener) Reset() {
	*x = Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listener) ProtoMessage() {}

func (x *Listener) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listener.ProtoReflect.Descriptor instead.
func (*Listener) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{7}
}

func (x *Listener) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Listener) GetEndpoints() []*Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (m *Listener) GetListener() isListener_Listener {
	if m != nil {
		return m.Listener
	}
	return nil
}

func (x *Listener) GetHttp() *HttpListener {
	if x, ok := x.GetListener().(*Listener_Http); ok {
		return x.Http
	}
	return nil
}

func (x *Listener) GetTls() *TlsListener {
	if x, ok := x.GetListener().(*Listener_Tls); ok {
		return x.Tls
	}
	return nil
}

type isListener_Listener interface {
	isListener_Listener()
}

type Listener_Http struct {
	Http *HttpListener `protobuf:"bytes,3,opt,name=http,proto3,oneof"`
}

type Listener_Tls struct {
	Tls *TlsListener `protobuf:"bytes,4,opt,name=tls,proto3,oneof"`
}

func (*Listener_Http) isListener_Listener() {}

func (*Listener_Tls) isListener_Listener() {}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Ports     []int64    `protobuf:"varint,2,rep,packed,name=ports,proto3" json:"ports,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{8}
}

func (x *Endpoint) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Endpoint) GetPorts() []int64 {
	if x != nil {
		return x.Ports
	}
	return nil
}

type HttpListener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sets plaintext HTTP router, optional.
	Handler *HttpHandler `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	// Shortcut for adding http -> https redirects,
	// can be used instead of the HttpHandler above.
	Redirects *Redirects `protobuf:"bytes,2,opt,name=redirects,proto3" json:"redirects,omitempty"`
}

func (x *HttpListener) Reset() {
	*x = HttpListener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpListener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpListener) ProtoMessage() {}

func (x *HttpListener) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpListener.ProtoReflect.Descriptor instead.
func (*HttpListener) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{9}
}

func (x *HttpListener) GetHandler() *HttpHandler {
	if x != nil {
		return x.Handler
	}
	return nil
}

func (x *HttpListener) GetRedirects() *Redirects {
	if x != nil {
		return x.Redirects
	}
	return nil
}

type TlsListener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultHandler *TlsHandler `protobuf:"bytes,1,opt,name=default_handler,json=defaultHandler,proto3" json:"default_handler,omitempty"`
	SniHandlers    []*SniMatch `protobuf:"bytes,2,rep,name=sni_handlers,json=sniHandlers,proto3" json:"sni_handlers,omitempty"`
}

func (x *TlsListener) Reset() {
	*x = TlsListener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlsListener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsListener) ProtoMessage() {}

func (x *TlsListener) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsListener.ProtoReflect.Descriptor instead.
func (*TlsListener) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{10}
}

func (x *TlsListener) GetDefaultHandler() *TlsHandler {
	if x != nil {
		return x.DefaultHandler
	}
	return nil
}

func (x *TlsListener) GetSniHandlers() []*SniMatch {
	if x != nil {
		return x.SniHandlers
	}
	return nil
}

type Http2Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxConcurrentStreams int64 `protobuf:"varint,1,opt,name=max_concurrent_streams,json=maxConcurrentStreams,proto3" json:"max_concurrent_streams,omitempty"`
}

func (x *Http2Options) Reset() {
	*x = Http2Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Http2Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http2Options) ProtoMessage() {}

func (x *Http2Options) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Http2Options.ProtoReflect.Descriptor instead.
func (*Http2Options) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{11}
}

func (x *Http2Options) GetMaxConcurrentStreams() int64 {
	if x != nil {
		return x.MaxConcurrentStreams
	}
	return 0
}

type HttpHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpRouterId string `protobuf:"bytes,1,opt,name=http_router_id,json=httpRouterId,proto3" json:"http_router_id,omitempty"`
	// Types that are assignable to ProtocolSettings:
	//	*HttpHandler_Http2Options
	//	*HttpHandler_AllowHttp10
	ProtocolSettings isHttpHandler_ProtocolSettings `protobuf_oneof:"protocol_settings"`
}

func (x *HttpHandler) Reset() {
	*x = HttpHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHandler) ProtoMessage() {}

func (x *HttpHandler) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHandler.ProtoReflect.Descriptor instead.
func (*HttpHandler) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{12}
}

func (x *HttpHandler) GetHttpRouterId() string {
	if x != nil {
		return x.HttpRouterId
	}
	return ""
}

func (m *HttpHandler) GetProtocolSettings() isHttpHandler_ProtocolSettings {
	if m != nil {
		return m.ProtocolSettings
	}
	return nil
}

func (x *HttpHandler) GetHttp2Options() *Http2Options {
	if x, ok := x.GetProtocolSettings().(*HttpHandler_Http2Options); ok {
		return x.Http2Options
	}
	return nil
}

func (x *HttpHandler) GetAllowHttp10() bool {
	if x, ok := x.GetProtocolSettings().(*HttpHandler_AllowHttp10); ok {
		return x.AllowHttp10
	}
	return false
}

type isHttpHandler_ProtocolSettings interface {
	isHttpHandler_ProtocolSettings()
}

type HttpHandler_Http2Options struct {
	// If set, will enable HTTP2 protocol for the handler.
	Http2Options *Http2Options `protobuf:"bytes,2,opt,name=http2_options,json=http2Options,proto3,oneof"`
}

type HttpHandler_AllowHttp10 struct {
	// If set, will enable only HTTP1 protocol with HTTP1.0 support.
	AllowHttp10 bool `protobuf:"varint,3,opt,name=allow_http10,json=allowHttp10,proto3,oneof"`
}

func (*HttpHandler_Http2Options) isHttpHandler_ProtocolSettings() {}

func (*HttpHandler_AllowHttp10) isHttpHandler_ProtocolSettings() {}

type Redirects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Adds "*" VirtualHost with a http -> https redirect.
	HttpToHttps bool `protobuf:"varint,1,opt,name=http_to_https,json=httpToHttps,proto3" json:"http_to_https,omitempty"`
}

func (x *Redirects) Reset() {
	*x = Redirects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Redirects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redirects) ProtoMessage() {}

func (x *Redirects) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redirects.ProtoReflect.Descriptor instead.
func (*Redirects) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{13}
}

func (x *Redirects) GetHttpToHttps() bool {
	if x != nil {
		return x.HttpToHttps
	}
	return false
}

type SniMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ServerNames []string    `protobuf:"bytes,2,rep,name=server_names,json=serverNames,proto3" json:"server_names,omitempty"`
	Handler     *TlsHandler `protobuf:"bytes,3,opt,name=handler,proto3" json:"handler,omitempty"`
}

func (x *SniMatch) Reset() {
	*x = SniMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SniMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SniMatch) ProtoMessage() {}

func (x *SniMatch) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SniMatch.ProtoReflect.Descriptor instead.
func (*SniMatch) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{14}
}

func (x *SniMatch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SniMatch) GetServerNames() []string {
	if x != nil {
		return x.ServerNames
	}
	return nil
}

func (x *SniMatch) GetHandler() *TlsHandler {
	if x != nil {
		return x.Handler
	}
	return nil
}

type TlsHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Handler:
	//	*TlsHandler_HttpHandler
	Handler isTlsHandler_Handler `protobuf_oneof:"handler"`
	// Certificate IDs in the Certificate Manager.
	// Multiple TLS certificates can be associated with the same context to allow
	// both RSA and ECDSA certificates.
	// Only the first certificate of each type will be used.
	CertificateIds []string `protobuf:"bytes,3,rep,name=certificate_ids,json=certificateIds,proto3" json:"certificate_ids,omitempty"`
}

func (x *TlsHandler) Reset() {
	*x = TlsHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlsHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsHandler) ProtoMessage() {}

func (x *TlsHandler) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsHandler.ProtoReflect.Descriptor instead.
func (*TlsHandler) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{15}
}

func (m *TlsHandler) GetHandler() isTlsHandler_Handler {
	if m != nil {
		return m.Handler
	}
	return nil
}

func (x *TlsHandler) GetHttpHandler() *HttpHandler {
	if x, ok := x.GetHandler().(*TlsHandler_HttpHandler); ok {
		return x.HttpHandler
	}
	return nil
}

func (x *TlsHandler) GetCertificateIds() []string {
	if x != nil {
		return x.CertificateIds
	}
	return nil
}

type isTlsHandler_Handler interface {
	isTlsHandler_Handler()
}

type TlsHandler_HttpHandler struct {
	HttpHandler *HttpHandler `protobuf:"bytes,2,opt,name=http_handler,json=httpHandler,proto3,oneof"`
}

func (*TlsHandler_HttpHandler) isTlsHandler_Handler() {}

type TargetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Statuses of the target for all known zones.
	Status *TargetState_HealthcheckStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Target *Target                        `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *TargetState) Reset() {
	*x = TargetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetState) ProtoMessage() {}

func (x *TargetState) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetState.ProtoReflect.Descriptor instead.
func (*TargetState) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{16}
}

func (x *TargetState) GetStatus() *TargetState_HealthcheckStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TargetState) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type TargetState_HealthcheckStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneStatuses []*TargetState_ZoneHealthcheckStatus `protobuf:"bytes,1,rep,name=zone_statuses,json=zoneStatuses,proto3" json:"zone_statuses,omitempty"`
}

func (x *TargetState_HealthcheckStatus) Reset() {
	*x = TargetState_HealthcheckStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetState_HealthcheckStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetState_HealthcheckStatus) ProtoMessage() {}

func (x *TargetState_HealthcheckStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetState_HealthcheckStatus.ProtoReflect.Descriptor instead.
func (*TargetState_HealthcheckStatus) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{16, 0}
}

func (x *TargetState_HealthcheckStatus) GetZoneStatuses() []*TargetState_ZoneHealthcheckStatus {
	if x != nil {
		return x.ZoneStatuses
	}
	return nil
}

type TargetState_ZoneHealthcheckStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// Healthcheck status of target for the specific zone.
	Status TargetState_Status `protobuf:"varint,2,opt,name=status,proto3,enum=yandex.cloud.apploadbalancer.v1.TargetState_Status" json:"status,omitempty"`
	// Whether UNHEALTHY status was set due to failed active checks or not.
	FailedActiveHc bool `protobuf:"varint,3,opt,name=failed_active_hc,json=failedActiveHc,proto3" json:"failed_active_hc,omitempty"`
}

func (x *TargetState_ZoneHealthcheckStatus) Reset() {
	*x = TargetState_ZoneHealthcheckStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetState_ZoneHealthcheckStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetState_ZoneHealthcheckStatus) ProtoMessage() {}

func (x *TargetState_ZoneHealthcheckStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetState_ZoneHealthcheckStatus.ProtoReflect.Descriptor instead.
func (*TargetState_ZoneHealthcheckStatus) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP(), []int{16, 1}
}

func (x *TargetState_ZoneHealthcheckStatus) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *TargetState_ZoneHealthcheckStatus) GetStatus() TargetState_Status {
	if x != nil {
		return x.Status
	}
	return TargetState_STATUS_UNSPECIFIED
}

func (x *TargetState_ZoneHealthcheckStatus) GetFailedActiveHc() bool {
	if x != nil {
		return x.FailedActiveHc
	}
	return false
}

var File_yandex_cloud_apploadbalancer_v1_load_balancer_proto protoreflect.FileDescriptor

var file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDesc = []byte{
	0x0a, 0x33, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x06, 0x0a, 0x0c, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x22, 0xde, 0x02,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6a, 0x0a, 0x15, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6a, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x6a, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0x2f,
	0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x4c, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x22, 0x2f, 0x0a,
	0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6f,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31,
	0x01, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x22,
	0x68, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x54, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x82, 0xc8, 0x31, 0x03, 0x3e, 0x3d, 0x31, 0x90, 0xc8, 0x31, 0x01, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x47, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x40,
	0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6c,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x74, 0x6c, 0x73,
	0x42, 0x10, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x04, 0xc0, 0xc1,
	0x31, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x4e, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x06, 0x82, 0xc8,
	0x31, 0x02, 0x3e, 0x30, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x42, 0x11,
	0x82, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0xfa, 0xc7, 0x31, 0x07, 0x31, 0x2d, 0x36, 0x35, 0x35, 0x33,
	0x35, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x48, 0x74, 0x74,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x07, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x09, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x0b,
	0x54, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x6e, 0x69, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6e, 0x69, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0b, 0x73, 0x6e, 0x69, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x44, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x32, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x0b,
	0x48, 0x74, 0x74, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x54, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x32, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x32,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x32,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x68, 0x74, 0x74, 0x70, 0x31, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x74, 0x74, 0x70, 0x31, 0x30, 0x42, 0x13, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x2f, 0x0a, 0x09, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x54, 0x6f, 0x48, 0x74, 0x74,
	0x70, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x53, 0x6e, 0x69, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8,
	0xc7, 0x31, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x06, 0x82, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x22, 0xa1, 0x01, 0x0a, 0x0a, 0x54, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0x82, 0xc8,
	0x31, 0x02, 0x3e, 0x30, 0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x73, 0x42, 0x0f, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12,
	0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0xca, 0x04, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x1a, 0x7c, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x0d, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x5a,
	0x6f, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x7a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x15, 0x5a, 0x6f, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8,
	0xc7, 0x31, 0x01, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x48, 0x63, 0x22, 0x6e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x48,
	0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x52, 0x41, 0x49, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x05, 0x42, 0x7a, 0x0a, 0x23, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61,
	0x70, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescOnce sync.Once
	file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescData = file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDesc
)

func file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescGZIP() []byte {
	file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescData)
	})
	return file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDescData
}

var file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_goTypes = []interface{}{
	(LoadBalancer_Status)(0),                  // 0: yandex.cloud.apploadbalancer.v1.LoadBalancer.Status
	(TargetState_Status)(0),                   // 1: yandex.cloud.apploadbalancer.v1.TargetState.Status
	(*LoadBalancer)(nil),                      // 2: yandex.cloud.apploadbalancer.v1.LoadBalancer
	(*Address)(nil),                           // 3: yandex.cloud.apploadbalancer.v1.Address
	(*ExternalIpv4Address)(nil),               // 4: yandex.cloud.apploadbalancer.v1.ExternalIpv4Address
	(*InternalIpv4Address)(nil),               // 5: yandex.cloud.apploadbalancer.v1.InternalIpv4Address
	(*ExternalIpv6Address)(nil),               // 6: yandex.cloud.apploadbalancer.v1.ExternalIpv6Address
	(*Location)(nil),                          // 7: yandex.cloud.apploadbalancer.v1.Location
	(*AllocationPolicy)(nil),                  // 8: yandex.cloud.apploadbalancer.v1.AllocationPolicy
	(*Listener)(nil),                          // 9: yandex.cloud.apploadbalancer.v1.Listener
	(*Endpoint)(nil),                          // 10: yandex.cloud.apploadbalancer.v1.Endpoint
	(*HttpListener)(nil),                      // 11: yandex.cloud.apploadbalancer.v1.HttpListener
	(*TlsListener)(nil),                       // 12: yandex.cloud.apploadbalancer.v1.TlsListener
	(*Http2Options)(nil),                      // 13: yandex.cloud.apploadbalancer.v1.Http2Options
	(*HttpHandler)(nil),                       // 14: yandex.cloud.apploadbalancer.v1.HttpHandler
	(*Redirects)(nil),                         // 15: yandex.cloud.apploadbalancer.v1.Redirects
	(*SniMatch)(nil),                          // 16: yandex.cloud.apploadbalancer.v1.SniMatch
	(*TlsHandler)(nil),                        // 17: yandex.cloud.apploadbalancer.v1.TlsHandler
	(*TargetState)(nil),                       // 18: yandex.cloud.apploadbalancer.v1.TargetState
	nil,                                       // 19: yandex.cloud.apploadbalancer.v1.LoadBalancer.LabelsEntry
	(*TargetState_HealthcheckStatus)(nil),     // 20: yandex.cloud.apploadbalancer.v1.TargetState.HealthcheckStatus
	(*TargetState_ZoneHealthcheckStatus)(nil), // 21: yandex.cloud.apploadbalancer.v1.TargetState.ZoneHealthcheckStatus
	(*timestamp.Timestamp)(nil),               // 22: google.protobuf.Timestamp
	(*Target)(nil),                            // 23: yandex.cloud.apploadbalancer.v1.Target
}
var file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_depIdxs = []int32{
	19, // 0: yandex.cloud.apploadbalancer.v1.LoadBalancer.labels:type_name -> yandex.cloud.apploadbalancer.v1.LoadBalancer.LabelsEntry
	0,  // 1: yandex.cloud.apploadbalancer.v1.LoadBalancer.status:type_name -> yandex.cloud.apploadbalancer.v1.LoadBalancer.Status
	9,  // 2: yandex.cloud.apploadbalancer.v1.LoadBalancer.listeners:type_name -> yandex.cloud.apploadbalancer.v1.Listener
	8,  // 3: yandex.cloud.apploadbalancer.v1.LoadBalancer.allocation_policy:type_name -> yandex.cloud.apploadbalancer.v1.AllocationPolicy
	22, // 4: yandex.cloud.apploadbalancer.v1.LoadBalancer.created_at:type_name -> google.protobuf.Timestamp
	4,  // 5: yandex.cloud.apploadbalancer.v1.Address.external_ipv4_address:type_name -> yandex.cloud.apploadbalancer.v1.ExternalIpv4Address
	5,  // 6: yandex.cloud.apploadbalancer.v1.Address.internal_ipv4_address:type_name -> yandex.cloud.apploadbalancer.v1.InternalIpv4Address
	6,  // 7: yandex.cloud.apploadbalancer.v1.Address.external_ipv6_address:type_name -> yandex.cloud.apploadbalancer.v1.ExternalIpv6Address
	7,  // 8: yandex.cloud.apploadbalancer.v1.AllocationPolicy.locations:type_name -> yandex.cloud.apploadbalancer.v1.Location
	10, // 9: yandex.cloud.apploadbalancer.v1.Listener.endpoints:type_name -> yandex.cloud.apploadbalancer.v1.Endpoint
	11, // 10: yandex.cloud.apploadbalancer.v1.Listener.http:type_name -> yandex.cloud.apploadbalancer.v1.HttpListener
	12, // 11: yandex.cloud.apploadbalancer.v1.Listener.tls:type_name -> yandex.cloud.apploadbalancer.v1.TlsListener
	3,  // 12: yandex.cloud.apploadbalancer.v1.Endpoint.addresses:type_name -> yandex.cloud.apploadbalancer.v1.Address
	14, // 13: yandex.cloud.apploadbalancer.v1.HttpListener.handler:type_name -> yandex.cloud.apploadbalancer.v1.HttpHandler
	15, // 14: yandex.cloud.apploadbalancer.v1.HttpListener.redirects:type_name -> yandex.cloud.apploadbalancer.v1.Redirects
	17, // 15: yandex.cloud.apploadbalancer.v1.TlsListener.default_handler:type_name -> yandex.cloud.apploadbalancer.v1.TlsHandler
	16, // 16: yandex.cloud.apploadbalancer.v1.TlsListener.sni_handlers:type_name -> yandex.cloud.apploadbalancer.v1.SniMatch
	13, // 17: yandex.cloud.apploadbalancer.v1.HttpHandler.http2_options:type_name -> yandex.cloud.apploadbalancer.v1.Http2Options
	17, // 18: yandex.cloud.apploadbalancer.v1.SniMatch.handler:type_name -> yandex.cloud.apploadbalancer.v1.TlsHandler
	14, // 19: yandex.cloud.apploadbalancer.v1.TlsHandler.http_handler:type_name -> yandex.cloud.apploadbalancer.v1.HttpHandler
	20, // 20: yandex.cloud.apploadbalancer.v1.TargetState.status:type_name -> yandex.cloud.apploadbalancer.v1.TargetState.HealthcheckStatus
	23, // 21: yandex.cloud.apploadbalancer.v1.TargetState.target:type_name -> yandex.cloud.apploadbalancer.v1.Target
	21, // 22: yandex.cloud.apploadbalancer.v1.TargetState.HealthcheckStatus.zone_statuses:type_name -> yandex.cloud.apploadbalancer.v1.TargetState.ZoneHealthcheckStatus
	1,  // 23: yandex.cloud.apploadbalancer.v1.TargetState.ZoneHealthcheckStatus.status:type_name -> yandex.cloud.apploadbalancer.v1.TargetState.Status
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_init() }
func file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_init() {
	if File_yandex_cloud_apploadbalancer_v1_load_balancer_proto != nil {
		return
	}
	file_yandex_cloud_apploadbalancer_v1_target_group_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalIpv4Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalIpv4Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalIpv6Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpListener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TlsListener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Http2Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Redirects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SniMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TlsHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetState_HealthcheckStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetState_ZoneHealthcheckStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Address_ExternalIpv4Address)(nil),
		(*Address_InternalIpv4Address)(nil),
		(*Address_ExternalIpv6Address)(nil),
	}
	file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Listener_Http)(nil),
		(*Listener_Tls)(nil),
	}
	file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*HttpHandler_Http2Options)(nil),
		(*HttpHandler_AllowHttp10)(nil),
	}
	file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*TlsHandler_HttpHandler)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_msgTypes,
	}.Build()
	File_yandex_cloud_apploadbalancer_v1_load_balancer_proto = out.File
	file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_rawDesc = nil
	file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_goTypes = nil
	file_yandex_cloud_apploadbalancer_v1_load_balancer_proto_depIdxs = nil
}
