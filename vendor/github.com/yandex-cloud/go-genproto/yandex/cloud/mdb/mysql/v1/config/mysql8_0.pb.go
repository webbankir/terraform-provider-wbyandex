// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: yandex/cloud/mdb/mysql/v1/config/mysql8_0.proto

package mysql

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MysqlConfig8_0_SQLMode int32

const (
	MysqlConfig8_0_SQLMODE_UNSPECIFIED        MysqlConfig8_0_SQLMode = 0
	MysqlConfig8_0_ALLOW_INVALID_DATES        MysqlConfig8_0_SQLMode = 1
	MysqlConfig8_0_ANSI_QUOTES                MysqlConfig8_0_SQLMode = 2
	MysqlConfig8_0_ERROR_FOR_DIVISION_BY_ZERO MysqlConfig8_0_SQLMode = 3
	MysqlConfig8_0_HIGH_NOT_PRECEDENCE        MysqlConfig8_0_SQLMode = 4
	MysqlConfig8_0_IGNORE_SPACE               MysqlConfig8_0_SQLMode = 5
	MysqlConfig8_0_NO_AUTO_VALUE_ON_ZERO      MysqlConfig8_0_SQLMode = 6
	MysqlConfig8_0_NO_BACKSLASH_ESCAPES       MysqlConfig8_0_SQLMode = 7
	MysqlConfig8_0_NO_ENGINE_SUBSTITUTION     MysqlConfig8_0_SQLMode = 8
	MysqlConfig8_0_NO_UNSIGNED_SUBTRACTION    MysqlConfig8_0_SQLMode = 9
	MysqlConfig8_0_NO_ZERO_DATE               MysqlConfig8_0_SQLMode = 10
	MysqlConfig8_0_NO_ZERO_IN_DATE            MysqlConfig8_0_SQLMode = 11
	MysqlConfig8_0_ONLY_FULL_GROUP_BY         MysqlConfig8_0_SQLMode = 15
	MysqlConfig8_0_PAD_CHAR_TO_FULL_LENGTH    MysqlConfig8_0_SQLMode = 16
	MysqlConfig8_0_PIPES_AS_CONCAT            MysqlConfig8_0_SQLMode = 17
	MysqlConfig8_0_REAL_AS_FLOAT              MysqlConfig8_0_SQLMode = 18
	MysqlConfig8_0_STRICT_ALL_TABLES          MysqlConfig8_0_SQLMode = 19
	MysqlConfig8_0_STRICT_TRANS_TABLES        MysqlConfig8_0_SQLMode = 20
	MysqlConfig8_0_TIME_TRUNCATE_FRACTIONAL   MysqlConfig8_0_SQLMode = 21
	MysqlConfig8_0_ANSI                       MysqlConfig8_0_SQLMode = 22
	MysqlConfig8_0_TRADITIONAL                MysqlConfig8_0_SQLMode = 23
	MysqlConfig8_0_NO_DIR_IN_CREATE           MysqlConfig8_0_SQLMode = 24
)

// Enum value maps for MysqlConfig8_0_SQLMode.
var (
	MysqlConfig8_0_SQLMode_name = map[int32]string{
		0:  "SQLMODE_UNSPECIFIED",
		1:  "ALLOW_INVALID_DATES",
		2:  "ANSI_QUOTES",
		3:  "ERROR_FOR_DIVISION_BY_ZERO",
		4:  "HIGH_NOT_PRECEDENCE",
		5:  "IGNORE_SPACE",
		6:  "NO_AUTO_VALUE_ON_ZERO",
		7:  "NO_BACKSLASH_ESCAPES",
		8:  "NO_ENGINE_SUBSTITUTION",
		9:  "NO_UNSIGNED_SUBTRACTION",
		10: "NO_ZERO_DATE",
		11: "NO_ZERO_IN_DATE",
		15: "ONLY_FULL_GROUP_BY",
		16: "PAD_CHAR_TO_FULL_LENGTH",
		17: "PIPES_AS_CONCAT",
		18: "REAL_AS_FLOAT",
		19: "STRICT_ALL_TABLES",
		20: "STRICT_TRANS_TABLES",
		21: "TIME_TRUNCATE_FRACTIONAL",
		22: "ANSI",
		23: "TRADITIONAL",
		24: "NO_DIR_IN_CREATE",
	}
	MysqlConfig8_0_SQLMode_value = map[string]int32{
		"SQLMODE_UNSPECIFIED":        0,
		"ALLOW_INVALID_DATES":        1,
		"ANSI_QUOTES":                2,
		"ERROR_FOR_DIVISION_BY_ZERO": 3,
		"HIGH_NOT_PRECEDENCE":        4,
		"IGNORE_SPACE":               5,
		"NO_AUTO_VALUE_ON_ZERO":      6,
		"NO_BACKSLASH_ESCAPES":       7,
		"NO_ENGINE_SUBSTITUTION":     8,
		"NO_UNSIGNED_SUBTRACTION":    9,
		"NO_ZERO_DATE":               10,
		"NO_ZERO_IN_DATE":            11,
		"ONLY_FULL_GROUP_BY":         15,
		"PAD_CHAR_TO_FULL_LENGTH":    16,
		"PIPES_AS_CONCAT":            17,
		"REAL_AS_FLOAT":              18,
		"STRICT_ALL_TABLES":          19,
		"STRICT_TRANS_TABLES":        20,
		"TIME_TRUNCATE_FRACTIONAL":   21,
		"ANSI":                       22,
		"TRADITIONAL":                23,
		"NO_DIR_IN_CREATE":           24,
	}
)

func (x MysqlConfig8_0_SQLMode) Enum() *MysqlConfig8_0_SQLMode {
	p := new(MysqlConfig8_0_SQLMode)
	*p = x
	return p
}

func (x MysqlConfig8_0_SQLMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_0_SQLMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_enumTypes[0].Descriptor()
}

func (MysqlConfig8_0_SQLMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_enumTypes[0]
}

func (x MysqlConfig8_0_SQLMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_0_SQLMode.Descriptor instead.
func (MysqlConfig8_0_SQLMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescGZIP(), []int{0, 0}
}

type MysqlConfig8_0_AuthPlugin int32

const (
	MysqlConfig8_0_AUTH_PLUGIN_UNSPECIFIED MysqlConfig8_0_AuthPlugin = 0
	// Using [Native Pluggable Authentication](https://dev.mysql.com/doc/refman/8.0/en/native-pluggable-authentication.html).
	MysqlConfig8_0_MYSQL_NATIVE_PASSWORD MysqlConfig8_0_AuthPlugin = 1
	// Using [Caching SHA-2 Pluggable Authentication](https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html).
	MysqlConfig8_0_CACHING_SHA2_PASSWORD MysqlConfig8_0_AuthPlugin = 2
	// Using [SHA-256 Pluggable Authentication](https://dev.mysql.com/doc/refman/8.0/en/sha256-pluggable-authentication.html).
	MysqlConfig8_0_SHA256_PASSWORD MysqlConfig8_0_AuthPlugin = 3
)

// Enum value maps for MysqlConfig8_0_AuthPlugin.
var (
	MysqlConfig8_0_AuthPlugin_name = map[int32]string{
		0: "AUTH_PLUGIN_UNSPECIFIED",
		1: "MYSQL_NATIVE_PASSWORD",
		2: "CACHING_SHA2_PASSWORD",
		3: "SHA256_PASSWORD",
	}
	MysqlConfig8_0_AuthPlugin_value = map[string]int32{
		"AUTH_PLUGIN_UNSPECIFIED": 0,
		"MYSQL_NATIVE_PASSWORD":   1,
		"CACHING_SHA2_PASSWORD":   2,
		"SHA256_PASSWORD":         3,
	}
)

func (x MysqlConfig8_0_AuthPlugin) Enum() *MysqlConfig8_0_AuthPlugin {
	p := new(MysqlConfig8_0_AuthPlugin)
	*p = x
	return p
}

func (x MysqlConfig8_0_AuthPlugin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_0_AuthPlugin) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_enumTypes[1].Descriptor()
}

func (MysqlConfig8_0_AuthPlugin) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_enumTypes[1]
}

func (x MysqlConfig8_0_AuthPlugin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_0_AuthPlugin.Descriptor instead.
func (MysqlConfig8_0_AuthPlugin) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescGZIP(), []int{0, 1}
}

type MysqlConfig8_0_TransactionIsolation int32

const (
	MysqlConfig8_0_TRANSACTION_ISOLATION_UNSPECIFIED MysqlConfig8_0_TransactionIsolation = 0
	MysqlConfig8_0_READ_COMMITTED                    MysqlConfig8_0_TransactionIsolation = 1
	MysqlConfig8_0_REPEATABLE_READ                   MysqlConfig8_0_TransactionIsolation = 2
	MysqlConfig8_0_SERIALIZABLE                      MysqlConfig8_0_TransactionIsolation = 3
)

// Enum value maps for MysqlConfig8_0_TransactionIsolation.
var (
	MysqlConfig8_0_TransactionIsolation_name = map[int32]string{
		0: "TRANSACTION_ISOLATION_UNSPECIFIED",
		1: "READ_COMMITTED",
		2: "REPEATABLE_READ",
		3: "SERIALIZABLE",
	}
	MysqlConfig8_0_TransactionIsolation_value = map[string]int32{
		"TRANSACTION_ISOLATION_UNSPECIFIED": 0,
		"READ_COMMITTED":                    1,
		"REPEATABLE_READ":                   2,
		"SERIALIZABLE":                      3,
	}
)

func (x MysqlConfig8_0_TransactionIsolation) Enum() *MysqlConfig8_0_TransactionIsolation {
	p := new(MysqlConfig8_0_TransactionIsolation)
	*p = x
	return p
}

func (x MysqlConfig8_0_TransactionIsolation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_0_TransactionIsolation) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_enumTypes[2].Descriptor()
}

func (MysqlConfig8_0_TransactionIsolation) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_enumTypes[2]
}

func (x MysqlConfig8_0_TransactionIsolation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_0_TransactionIsolation.Descriptor instead.
func (MysqlConfig8_0_TransactionIsolation) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescGZIP(), []int{0, 2}
}

type MysqlConfig8_0_BinlogRowImage int32

const (
	MysqlConfig8_0_BINLOG_ROW_IMAGE_UNSPECIFIED MysqlConfig8_0_BinlogRowImage = 0
	MysqlConfig8_0_FULL                         MysqlConfig8_0_BinlogRowImage = 1
	MysqlConfig8_0_MINIMAL                      MysqlConfig8_0_BinlogRowImage = 2
	MysqlConfig8_0_NOBLOB                       MysqlConfig8_0_BinlogRowImage = 3
)

// Enum value maps for MysqlConfig8_0_BinlogRowImage.
var (
	MysqlConfig8_0_BinlogRowImage_name = map[int32]string{
		0: "BINLOG_ROW_IMAGE_UNSPECIFIED",
		1: "FULL",
		2: "MINIMAL",
		3: "NOBLOB",
	}
	MysqlConfig8_0_BinlogRowImage_value = map[string]int32{
		"BINLOG_ROW_IMAGE_UNSPECIFIED": 0,
		"FULL":                         1,
		"MINIMAL":                      2,
		"NOBLOB":                       3,
	}
)

func (x MysqlConfig8_0_BinlogRowImage) Enum() *MysqlConfig8_0_BinlogRowImage {
	p := new(MysqlConfig8_0_BinlogRowImage)
	*p = x
	return p
}

func (x MysqlConfig8_0_BinlogRowImage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_0_BinlogRowImage) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_enumTypes[3].Descriptor()
}

func (MysqlConfig8_0_BinlogRowImage) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_enumTypes[3]
}

func (x MysqlConfig8_0_BinlogRowImage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_0_BinlogRowImage.Descriptor instead.
func (MysqlConfig8_0_BinlogRowImage) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescGZIP(), []int{0, 3}
}

type MysqlConfig8_0_SlaveParallelType int32

const (
	MysqlConfig8_0_SLAVE_PARALLEL_TYPE_UNSPECIFIED MysqlConfig8_0_SlaveParallelType = 0
	MysqlConfig8_0_DATABASE                        MysqlConfig8_0_SlaveParallelType = 1
	MysqlConfig8_0_LOGICAL_CLOCK                   MysqlConfig8_0_SlaveParallelType = 2
)

// Enum value maps for MysqlConfig8_0_SlaveParallelType.
var (
	MysqlConfig8_0_SlaveParallelType_name = map[int32]string{
		0: "SLAVE_PARALLEL_TYPE_UNSPECIFIED",
		1: "DATABASE",
		2: "LOGICAL_CLOCK",
	}
	MysqlConfig8_0_SlaveParallelType_value = map[string]int32{
		"SLAVE_PARALLEL_TYPE_UNSPECIFIED": 0,
		"DATABASE":                        1,
		"LOGICAL_CLOCK":                   2,
	}
)

func (x MysqlConfig8_0_SlaveParallelType) Enum() *MysqlConfig8_0_SlaveParallelType {
	p := new(MysqlConfig8_0_SlaveParallelType)
	*p = x
	return p
}

func (x MysqlConfig8_0_SlaveParallelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_0_SlaveParallelType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_enumTypes[4].Descriptor()
}

func (MysqlConfig8_0_SlaveParallelType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_enumTypes[4]
}

func (x MysqlConfig8_0_SlaveParallelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_0_SlaveParallelType.Descriptor instead.
func (MysqlConfig8_0_SlaveParallelType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescGZIP(), []int{0, 4}
}

// Options and structure of `MysqlConfig8_0` reflects MySQL 8.0 configuration file
type MysqlConfig8_0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the InnoDB buffer pool used for caching table and index data.
	//
	// For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
	InnodbBufferPoolSize *wrappers.Int64Value `protobuf:"bytes,1,opt,name=innodb_buffer_pool_size,json=innodbBufferPoolSize,proto3" json:"innodb_buffer_pool_size,omitempty"`
	// The maximum permitted number of simultaneous client connections.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections).
	MaxConnections *wrappers.Int64Value `protobuf:"bytes,2,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Time that it takes to process a query before it is considered slow.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
	LongQueryTime *wrappers.DoubleValue `protobuf:"bytes,3,opt,name=long_query_time,json=longQueryTime,proto3" json:"long_query_time,omitempty"`
	// Enable writing of general query log of MySQL.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log).
	GeneralLog *wrappers.BoolValue `protobuf:"bytes,4,opt,name=general_log,json=generalLog,proto3" json:"general_log,omitempty"`
	// Enable writing of audit log of MySQL.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables).
	AuditLog *wrappers.BoolValue `protobuf:"bytes,5,opt,name=audit_log,json=auditLog,proto3" json:"audit_log,omitempty"`
	// Server SQL mode of MySQL.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting).
	SqlMode []MysqlConfig8_0_SQLMode `protobuf:"varint,6,rep,packed,name=sql_mode,json=sqlMode,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0_SQLMode" json:"sql_mode,omitempty"`
	// The maximum size in bytes of one packet.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet).
	MaxAllowedPacket *wrappers.Int64Value `protobuf:"bytes,7,opt,name=max_allowed_packet,json=maxAllowedPacket,proto3" json:"max_allowed_packet,omitempty"`
	// Authentication plugin used in the managed MySQL cluster.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin)
	DefaultAuthenticationPlugin MysqlConfig8_0_AuthPlugin `protobuf:"varint,8,opt,name=default_authentication_plugin,json=defaultAuthenticationPlugin,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0_AuthPlugin" json:"default_authentication_plugin,omitempty"`
	// Transaction log flush behaviour.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
	InnodbFlushLogAtTrxCommit *wrappers.Int64Value `protobuf:"bytes,9,opt,name=innodb_flush_log_at_trx_commit,json=innodbFlushLogAtTrxCommit,proto3" json:"innodb_flush_log_at_trx_commit,omitempty"`
	// Max time in seconds for a transaction to wait for a row lock
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
	InnodbLockWaitTimeout *wrappers.Int64Value `protobuf:"bytes,10,opt,name=innodb_lock_wait_timeout,json=innodbLockWaitTimeout,proto3" json:"innodb_lock_wait_timeout,omitempty"`
	// Default transaction isolation level.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_transaction_isolation)
	TransactionIsolation MysqlConfig8_0_TransactionIsolation `protobuf:"varint,11,opt,name=transaction_isolation,json=transactionIsolation,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0_TransactionIsolation" json:"transaction_isolation,omitempty"`
	// Print information about deadlocks in error log
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
	InnodbPrintAllDeadlocks *wrappers.BoolValue `protobuf:"bytes,12,opt,name=innodb_print_all_deadlocks,json=innodbPrintAllDeadlocks,proto3" json:"innodb_print_all_deadlocks,omitempty"`
	// The number of seconds to wait for more data from a connection before aborting the read.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout)
	NetReadTimeout *wrappers.Int64Value `protobuf:"bytes,13,opt,name=net_read_timeout,json=netReadTimeout,proto3" json:"net_read_timeout,omitempty"`
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout)
	NetWriteTimeout *wrappers.Int64Value `protobuf:"bytes,14,opt,name=net_write_timeout,json=netWriteTimeout,proto3" json:"net_write_timeout,omitempty"`
	// The maximum permitted result length in bytes for the GROUP_CONCAT() function.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len)
	GroupConcatMaxLen *wrappers.Int64Value `protobuf:"bytes,15,opt,name=group_concat_max_len,json=groupConcatMaxLen,proto3" json:"group_concat_max_len,omitempty"`
	// The maximum size of internal in-memory temporary tables.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size)
	TmpTableSize *wrappers.Int64Value `protobuf:"bytes,16,opt,name=tmp_table_size,json=tmpTableSize,proto3" json:"tmp_table_size,omitempty"`
	// This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size)
	MaxHeapTableSize *wrappers.Int64Value `protobuf:"bytes,17,opt,name=max_heap_table_size,json=maxHeapTableSize,proto3" json:"max_heap_table_size,omitempty"`
	// The servers default time zone.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_default-time-zone)
	DefaultTimeZone string `protobuf:"bytes,18,opt,name=default_time_zone,json=defaultTimeZone,proto3" json:"default_time_zone,omitempty"`
	// The servers default character set.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_character_set_server)
	CharacterSetServer string `protobuf:"bytes,19,opt,name=character_set_server,json=characterSetServer,proto3" json:"character_set_server,omitempty"`
	// The server default collation.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_collation_server)
	CollationServer string `protobuf:"bytes,20,opt,name=collation_server,json=collationServer,proto3" json:"collation_server,omitempty"`
	// Enables Innodb adaptive hash index
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index)
	InnodbAdaptiveHashIndex *wrappers.BoolValue `protobuf:"bytes,21,opt,name=innodb_adaptive_hash_index,json=innodbAdaptiveHashIndex,proto3" json:"innodb_adaptive_hash_index,omitempty"`
	// Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave)
	InnodbNumaInterleave *wrappers.BoolValue `protobuf:"bytes,22,opt,name=innodb_numa_interleave,json=innodbNumaInterleave,proto3" json:"innodb_numa_interleave,omitempty"`
	// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size)
	InnodbLogBufferSize *wrappers.Int64Value `protobuf:"bytes,23,opt,name=innodb_log_buffer_size,json=innodbLogBufferSize,proto3" json:"innodb_log_buffer_size,omitempty"`
	// The size in bytes of the single Innodb Redo log file.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size)
	InnodbLogFileSize *wrappers.Int64Value `protobuf:"bytes,24,opt,name=innodb_log_file_size,json=innodbLogFileSize,proto3" json:"innodb_log_file_size,omitempty"`
	// Limits IO available for InnoDB background tasks
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity)
	InnodbIoCapacity *wrappers.Int64Value `protobuf:"bytes,25,opt,name=innodb_io_capacity,json=innodbIoCapacity,proto3" json:"innodb_io_capacity,omitempty"`
	// Limits IO available for InnoDB background tasks
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max)
	InnodbIoCapacityMax *wrappers.Int64Value `protobuf:"bytes,26,opt,name=innodb_io_capacity_max,json=innodbIoCapacityMax,proto3" json:"innodb_io_capacity_max,omitempty"`
	// The number of I/O threads for read operations in InnoDB.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads)
	InnodbReadIoThreads *wrappers.Int64Value `protobuf:"bytes,27,opt,name=innodb_read_io_threads,json=innodbReadIoThreads,proto3" json:"innodb_read_io_threads,omitempty"`
	// The number of I/O threads for write operations in InnoDB.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads)
	InnodbWriteIoThreads *wrappers.Int64Value `protobuf:"bytes,28,opt,name=innodb_write_io_threads,json=innodbWriteIoThreads,proto3" json:"innodb_write_io_threads,omitempty"`
	// The number of background threads devoted to the InnoDB purge operation.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads)
	InnodbPurgeThreads *wrappers.Int64Value `protobuf:"bytes,29,opt,name=innodb_purge_threads,json=innodbPurgeThreads,proto3" json:"innodb_purge_threads,omitempty"`
	// Defines the maximum number of threads permitted inside of InnoDB.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency)
	InnodbThreadConcurrency *wrappers.Int64Value `protobuf:"bytes,30,opt,name=innodb_thread_concurrency,json=innodbThreadConcurrency,proto3" json:"innodb_thread_concurrency,omitempty"`
	// Limits the max size of InnoDB temp tablespace
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path)
	InnodbTempDataFileMaxSize *wrappers.Int64Value `protobuf:"bytes,31,opt,name=innodb_temp_data_file_max_size,json=innodbTempDataFileMaxSize,proto3" json:"innodb_temp_data_file_max_size,omitempty"`
	// How many threads the server should cache for reuse.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size).
	ThreadCacheSize *wrappers.Int64Value `protobuf:"bytes,32,opt,name=thread_cache_size,json=threadCacheSize,proto3" json:"thread_cache_size,omitempty"`
	// The stack size for each thread. The default is large enough for normal operation.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack).
	ThreadStack *wrappers.Int64Value `protobuf:"bytes,33,opt,name=thread_stack,json=threadStack,proto3" json:"thread_stack,omitempty"`
	// The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size).
	JoinBufferSize *wrappers.Int64Value `protobuf:"bytes,34,opt,name=join_buffer_size,json=joinBufferSize,proto3" json:"join_buffer_size,omitempty"`
	// Each session that must perform a sort allocates a buffer of this size.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size).
	SortBufferSize *wrappers.Int64Value `protobuf:"bytes,35,opt,name=sort_buffer_size,json=sortBufferSize,proto3" json:"sort_buffer_size,omitempty"`
	// The number of table definitions that can be stored in the definition cache.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache).
	TableDefinitionCache *wrappers.Int64Value `protobuf:"bytes,36,opt,name=table_definition_cache,json=tableDefinitionCache,proto3" json:"table_definition_cache,omitempty"`
	// The number of open tables for all threads.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache).
	TableOpenCache *wrappers.Int64Value `protobuf:"bytes,37,opt,name=table_open_cache,json=tableOpenCache,proto3" json:"table_open_cache,omitempty"`
	// The number of open tables cache instances.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances).
	TableOpenCacheInstances *wrappers.Int64Value `protobuf:"bytes,38,opt,name=table_open_cache_instances,json=tableOpenCacheInstances,proto3" json:"table_open_cache_instances,omitempty"`
	// This system variable determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp).
	ExplicitDefaultsForTimestamp *wrappers.BoolValue `protobuf:"bytes,39,opt,name=explicit_defaults_for_timestamp,json=explicitDefaultsForTimestamp,proto3" json:"explicit_defaults_for_timestamp,omitempty"`
	// Can be used to control the operation of AUTO_INCREMENT columns.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-master.html#sysvar_auto_increment_increment).
	AutoIncrementIncrement *wrappers.Int64Value `protobuf:"bytes,40,opt,name=auto_increment_increment,json=autoIncrementIncrement,proto3" json:"auto_increment_increment,omitempty"`
	// Can be used to control the operation of AUTO_INCREMENT columns.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-master.html#sysvar_auto_increment_offset).
	AutoIncrementOffset *wrappers.Int64Value `protobuf:"bytes,41,opt,name=auto_increment_offset,json=autoIncrementOffset,proto3" json:"auto_increment_offset,omitempty"`
	// Controls how often the MySQL server synchronizes the binary log to disk.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog).
	SyncBinlog *wrappers.Int64Value `protobuf:"bytes,42,opt,name=sync_binlog,json=syncBinlog,proto3" json:"sync_binlog,omitempty"`
	// The size of the cache to hold changes to the binary log during a transaction.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size).
	BinlogCacheSize *wrappers.Int64Value `protobuf:"bytes,43,opt,name=binlog_cache_size,json=binlogCacheSize,proto3" json:"binlog_cache_size,omitempty"`
	// Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay).
	BinlogGroupCommitSyncDelay *wrappers.Int64Value `protobuf:"bytes,44,opt,name=binlog_group_commit_sync_delay,json=binlogGroupCommitSyncDelay,proto3" json:"binlog_group_commit_sync_delay,omitempty"`
	// For MySQL row-based replication, this variable determines how row images are written to the binary log.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_image).
	BinlogRowImage MysqlConfig8_0_BinlogRowImage `protobuf:"varint,45,opt,name=binlog_row_image,json=binlogRowImage,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0_BinlogRowImage" json:"binlog_row_image,omitempty"`
	// When enabled, it causes the server to write informational log events such as row query log events into its binary log.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events).
	BinlogRowsQueryLogEvents *wrappers.BoolValue `protobuf:"bytes,46,opt,name=binlog_rows_query_log_events,json=binlogRowsQueryLogEvents,proto3" json:"binlog_rows_query_log_events,omitempty"`
	// The number of replica acknowledgments the source must receive per transaction before proceeding.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-master.html#sysvar_rpl_semi_sync_master_wait_for_slave_count).
	RplSemiSyncMasterWaitForSlaveCount *wrappers.Int64Value `protobuf:"bytes,47,opt,name=rpl_semi_sync_master_wait_for_slave_count,json=rplSemiSyncMasterWaitForSlaveCount,proto3" json:"rpl_semi_sync_master_wait_for_slave_count,omitempty"`
	// When using a multithreaded replica, this variable specifies the policy used to decide which transactions are allowed to execute in parallel on the replica.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_type).
	SlaveParallelType MysqlConfig8_0_SlaveParallelType `protobuf:"varint,48,opt,name=slave_parallel_type,json=slaveParallelType,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0_SlaveParallelType" json:"slave_parallel_type,omitempty"`
	// Sets the number of applier threads for executing replication transactions in parallel.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers).
	SlaveParallelWorkers *wrappers.Int64Value `protobuf:"bytes,49,opt,name=slave_parallel_workers,json=slaveParallelWorkers,proto3" json:"slave_parallel_workers,omitempty"`
	// The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit).
	RegexpTimeLimit *wrappers.Int64Value `protobuf:"bytes,50,opt,name=regexp_time_limit,json=regexpTimeLimit,proto3" json:"regexp_time_limit,omitempty"`
	// The size of the binary log to hold.
	MdbPreserveBinlogBytes *wrappers.Int64Value `protobuf:"bytes,51,opt,name=mdb_preserve_binlog_bytes,json=mdbPreserveBinlogBytes,proto3" json:"mdb_preserve_binlog_bytes,omitempty"`
}

func (x *MysqlConfig8_0) Reset() {
	*x = MysqlConfig8_0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlConfig8_0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlConfig8_0) ProtoMessage() {}

func (x *MysqlConfig8_0) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlConfig8_0.ProtoReflect.Descriptor instead.
func (*MysqlConfig8_0) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescGZIP(), []int{0}
}

func (x *MysqlConfig8_0) GetInnodbBufferPoolSize() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbBufferPoolSize
	}
	return nil
}

func (x *MysqlConfig8_0) GetMaxConnections() *wrappers.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *MysqlConfig8_0) GetLongQueryTime() *wrappers.DoubleValue {
	if x != nil {
		return x.LongQueryTime
	}
	return nil
}

func (x *MysqlConfig8_0) GetGeneralLog() *wrappers.BoolValue {
	if x != nil {
		return x.GeneralLog
	}
	return nil
}

func (x *MysqlConfig8_0) GetAuditLog() *wrappers.BoolValue {
	if x != nil {
		return x.AuditLog
	}
	return nil
}

func (x *MysqlConfig8_0) GetSqlMode() []MysqlConfig8_0_SQLMode {
	if x != nil {
		return x.SqlMode
	}
	return nil
}

func (x *MysqlConfig8_0) GetMaxAllowedPacket() *wrappers.Int64Value {
	if x != nil {
		return x.MaxAllowedPacket
	}
	return nil
}

func (x *MysqlConfig8_0) GetDefaultAuthenticationPlugin() MysqlConfig8_0_AuthPlugin {
	if x != nil {
		return x.DefaultAuthenticationPlugin
	}
	return MysqlConfig8_0_AUTH_PLUGIN_UNSPECIFIED
}

func (x *MysqlConfig8_0) GetInnodbFlushLogAtTrxCommit() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbFlushLogAtTrxCommit
	}
	return nil
}

func (x *MysqlConfig8_0) GetInnodbLockWaitTimeout() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbLockWaitTimeout
	}
	return nil
}

func (x *MysqlConfig8_0) GetTransactionIsolation() MysqlConfig8_0_TransactionIsolation {
	if x != nil {
		return x.TransactionIsolation
	}
	return MysqlConfig8_0_TRANSACTION_ISOLATION_UNSPECIFIED
}

func (x *MysqlConfig8_0) GetInnodbPrintAllDeadlocks() *wrappers.BoolValue {
	if x != nil {
		return x.InnodbPrintAllDeadlocks
	}
	return nil
}

func (x *MysqlConfig8_0) GetNetReadTimeout() *wrappers.Int64Value {
	if x != nil {
		return x.NetReadTimeout
	}
	return nil
}

func (x *MysqlConfig8_0) GetNetWriteTimeout() *wrappers.Int64Value {
	if x != nil {
		return x.NetWriteTimeout
	}
	return nil
}

func (x *MysqlConfig8_0) GetGroupConcatMaxLen() *wrappers.Int64Value {
	if x != nil {
		return x.GroupConcatMaxLen
	}
	return nil
}

func (x *MysqlConfig8_0) GetTmpTableSize() *wrappers.Int64Value {
	if x != nil {
		return x.TmpTableSize
	}
	return nil
}

func (x *MysqlConfig8_0) GetMaxHeapTableSize() *wrappers.Int64Value {
	if x != nil {
		return x.MaxHeapTableSize
	}
	return nil
}

func (x *MysqlConfig8_0) GetDefaultTimeZone() string {
	if x != nil {
		return x.DefaultTimeZone
	}
	return ""
}

func (x *MysqlConfig8_0) GetCharacterSetServer() string {
	if x != nil {
		return x.CharacterSetServer
	}
	return ""
}

func (x *MysqlConfig8_0) GetCollationServer() string {
	if x != nil {
		return x.CollationServer
	}
	return ""
}

func (x *MysqlConfig8_0) GetInnodbAdaptiveHashIndex() *wrappers.BoolValue {
	if x != nil {
		return x.InnodbAdaptiveHashIndex
	}
	return nil
}

func (x *MysqlConfig8_0) GetInnodbNumaInterleave() *wrappers.BoolValue {
	if x != nil {
		return x.InnodbNumaInterleave
	}
	return nil
}

func (x *MysqlConfig8_0) GetInnodbLogBufferSize() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbLogBufferSize
	}
	return nil
}

func (x *MysqlConfig8_0) GetInnodbLogFileSize() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbLogFileSize
	}
	return nil
}

func (x *MysqlConfig8_0) GetInnodbIoCapacity() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbIoCapacity
	}
	return nil
}

func (x *MysqlConfig8_0) GetInnodbIoCapacityMax() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbIoCapacityMax
	}
	return nil
}

func (x *MysqlConfig8_0) GetInnodbReadIoThreads() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbReadIoThreads
	}
	return nil
}

func (x *MysqlConfig8_0) GetInnodbWriteIoThreads() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbWriteIoThreads
	}
	return nil
}

func (x *MysqlConfig8_0) GetInnodbPurgeThreads() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbPurgeThreads
	}
	return nil
}

func (x *MysqlConfig8_0) GetInnodbThreadConcurrency() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbThreadConcurrency
	}
	return nil
}

func (x *MysqlConfig8_0) GetInnodbTempDataFileMaxSize() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbTempDataFileMaxSize
	}
	return nil
}

func (x *MysqlConfig8_0) GetThreadCacheSize() *wrappers.Int64Value {
	if x != nil {
		return x.ThreadCacheSize
	}
	return nil
}

func (x *MysqlConfig8_0) GetThreadStack() *wrappers.Int64Value {
	if x != nil {
		return x.ThreadStack
	}
	return nil
}

func (x *MysqlConfig8_0) GetJoinBufferSize() *wrappers.Int64Value {
	if x != nil {
		return x.JoinBufferSize
	}
	return nil
}

func (x *MysqlConfig8_0) GetSortBufferSize() *wrappers.Int64Value {
	if x != nil {
		return x.SortBufferSize
	}
	return nil
}

func (x *MysqlConfig8_0) GetTableDefinitionCache() *wrappers.Int64Value {
	if x != nil {
		return x.TableDefinitionCache
	}
	return nil
}

func (x *MysqlConfig8_0) GetTableOpenCache() *wrappers.Int64Value {
	if x != nil {
		return x.TableOpenCache
	}
	return nil
}

func (x *MysqlConfig8_0) GetTableOpenCacheInstances() *wrappers.Int64Value {
	if x != nil {
		return x.TableOpenCacheInstances
	}
	return nil
}

func (x *MysqlConfig8_0) GetExplicitDefaultsForTimestamp() *wrappers.BoolValue {
	if x != nil {
		return x.ExplicitDefaultsForTimestamp
	}
	return nil
}

func (x *MysqlConfig8_0) GetAutoIncrementIncrement() *wrappers.Int64Value {
	if x != nil {
		return x.AutoIncrementIncrement
	}
	return nil
}

func (x *MysqlConfig8_0) GetAutoIncrementOffset() *wrappers.Int64Value {
	if x != nil {
		return x.AutoIncrementOffset
	}
	return nil
}

func (x *MysqlConfig8_0) GetSyncBinlog() *wrappers.Int64Value {
	if x != nil {
		return x.SyncBinlog
	}
	return nil
}

func (x *MysqlConfig8_0) GetBinlogCacheSize() *wrappers.Int64Value {
	if x != nil {
		return x.BinlogCacheSize
	}
	return nil
}

func (x *MysqlConfig8_0) GetBinlogGroupCommitSyncDelay() *wrappers.Int64Value {
	if x != nil {
		return x.BinlogGroupCommitSyncDelay
	}
	return nil
}

func (x *MysqlConfig8_0) GetBinlogRowImage() MysqlConfig8_0_BinlogRowImage {
	if x != nil {
		return x.BinlogRowImage
	}
	return MysqlConfig8_0_BINLOG_ROW_IMAGE_UNSPECIFIED
}

func (x *MysqlConfig8_0) GetBinlogRowsQueryLogEvents() *wrappers.BoolValue {
	if x != nil {
		return x.BinlogRowsQueryLogEvents
	}
	return nil
}

func (x *MysqlConfig8_0) GetRplSemiSyncMasterWaitForSlaveCount() *wrappers.Int64Value {
	if x != nil {
		return x.RplSemiSyncMasterWaitForSlaveCount
	}
	return nil
}

func (x *MysqlConfig8_0) GetSlaveParallelType() MysqlConfig8_0_SlaveParallelType {
	if x != nil {
		return x.SlaveParallelType
	}
	return MysqlConfig8_0_SLAVE_PARALLEL_TYPE_UNSPECIFIED
}

func (x *MysqlConfig8_0) GetSlaveParallelWorkers() *wrappers.Int64Value {
	if x != nil {
		return x.SlaveParallelWorkers
	}
	return nil
}

func (x *MysqlConfig8_0) GetRegexpTimeLimit() *wrappers.Int64Value {
	if x != nil {
		return x.RegexpTimeLimit
	}
	return nil
}

func (x *MysqlConfig8_0) GetMdbPreserveBinlogBytes() *wrappers.Int64Value {
	if x != nil {
		return x.MdbPreserveBinlogBytes
	}
	return nil
}

type MysqlConfigSet8_0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for a MySQL 8.0 cluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *MysqlConfig8_0 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a MySQL 8.0 cluster.
	UserConfig *MysqlConfig8_0 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a MySQL 8.0 cluster.
	DefaultConfig *MysqlConfig8_0 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *MysqlConfigSet8_0) Reset() {
	*x = MysqlConfigSet8_0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlConfigSet8_0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlConfigSet8_0) ProtoMessage() {}

func (x *MysqlConfigSet8_0) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlConfigSet8_0.ProtoReflect.Descriptor instead.
func (*MysqlConfigSet8_0) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescGZIP(), []int{1}
}

func (x *MysqlConfigSet8_0) GetEffectiveConfig() *MysqlConfig8_0 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *MysqlConfigSet8_0) GetUserConfig() *MysqlConfig8_0 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *MysqlConfigSet8_0) GetDefaultConfig() *MysqlConfig8_0 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

var File_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x38, 0x5f, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8e, 0x2c, 0x0a, 0x0e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x38, 0x5f, 0x30, 0x12, 0x61, 0x0a, 0x17, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0xc7, 0x31, 0x09, 0x3e, 0x3d, 0x35, 0x32, 0x34, 0x32, 0x38,
	0x38, 0x30, 0x52, 0x14, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c,
	0xfa, 0xc7, 0x31, 0x08, 0x31, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0f,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x6f,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x12,
	0x37, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x53, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x38, 0x5f, 0x30, 0x2e, 0x53, 0x51, 0x4c,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0xfa, 0xc7, 0x31, 0x0f, 0x31, 0x30, 0x32, 0x34,
	0x2d, 0x31, 0x30, 0x37, 0x33, 0x37, 0x34, 0x31, 0x38, 0x32, 0x34, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x7f, 0x0a,
	0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x38, 0x5f, 0x30, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x52, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x67,
	0x0a, 0x1e, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0xc7, 0x31, 0x03, 0x31, 0x2d, 0x32, 0x52, 0x19, 0x69, 0x6e,
	0x6e, 0x6f, 0x64, 0x62, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x41, 0x74, 0x54, 0x72,
	0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x61, 0x0a, 0x18, 0x69, 0x6e, 0x6e, 0x6f, 0x64,
	0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x31, 0x2d, 0x32, 0x38,
	0x38, 0x30, 0x30, 0x52, 0x15, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x4c, 0x6f, 0x63, 0x6b, 0x57,
	0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x7a, 0x0a, 0x15, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73,
	0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x38, 0x5f, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x1a, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62,
	0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x51, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x31, 0x2d, 0x31, 0x32,
	0x30, 0x30, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06,
	0x31, 0x2d, 0x31, 0x32, 0x30, 0x30, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5c, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a, 0x34, 0x2d, 0x33, 0x33, 0x35, 0x35, 0x34, 0x34,
	0x33, 0x32, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x4d,
	0x61, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x55, 0x0a, 0x0e, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0xfa, 0xc7, 0x31, 0x0e,
	0x31, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x33, 0x34, 0x32, 0x31, 0x37, 0x37, 0x32, 0x38, 0x52, 0x0c,
	0x74, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5f, 0x0a, 0x13,
	0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0xfa, 0xc7, 0x31, 0x0f, 0x31, 0x36, 0x33, 0x38,
	0x34, 0x2d, 0x31, 0x33, 0x34, 0x32, 0x31, 0x37, 0x37, 0x32, 0x38, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x48, 0x65, 0x61, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x1a, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x50, 0x0a, 0x16, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x61, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x62, 0x4e, 0x75, 0x6d, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x12, 0x67, 0x0a, 0x16, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x15,
	0xfa, 0xc7, 0x31, 0x11, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37, 0x36, 0x2d, 0x32, 0x36, 0x38, 0x34,
	0x33, 0x35, 0x34, 0x35, 0x36, 0x52, 0x13, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x4c, 0x6f, 0x67,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x66, 0x0a, 0x14, 0x69, 0x6e,
	0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x18, 0xfa, 0xc7, 0x31, 0x14, 0x32, 0x36, 0x38, 0x34, 0x33,
	0x35, 0x34, 0x35, 0x36, 0x2d, 0x34, 0x32, 0x39, 0x34, 0x39, 0x36, 0x37, 0x32, 0x39, 0x36, 0x52,
	0x11, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31,
	0x0a, 0x31, 0x30, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x10, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x62, 0x49, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x60, 0x0a,
	0x16, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a,
	0x31, 0x30, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x13, 0x69, 0x6e, 0x6e, 0x6f,
	0x64, 0x62, 0x49, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x12,
	0x5a, 0x0a, 0x16, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7,
	0x31, 0x04, 0x31, 0x2d, 0x31, 0x36, 0x52, 0x13, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x52, 0x65,
	0x61, 0x64, 0x49, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x17, 0x69,
	0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x31,
	0x2d, 0x31, 0x36, 0x52, 0x14, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x49, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x62, 0x5f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x31, 0x2d, 0x31, 0x36, 0x52, 0x12,
	0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x12, 0x63, 0x0a, 0x19, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x17,
	0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x72, 0x0a, 0x1e, 0x69, 0x6e, 0x6e, 0x6f, 0x64,
	0x62, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0xfa, 0xc7,
	0x31, 0x0e, 0x30, 0x2d, 0x31, 0x30, 0x37, 0x33, 0x37, 0x34, 0x31, 0x38, 0x32, 0x34, 0x30, 0x30,
	0x52, 0x19, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0c, 0xfa, 0xc7, 0x31, 0x08, 0x31, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30,
	0x30, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0xfa, 0xc7, 0x31, 0x0f, 0x31, 0x33, 0x31, 0x30, 0x37,
	0x32, 0x2d, 0x31, 0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x36, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x58, 0x0a, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11,
	0xfa, 0xc7, 0x31, 0x0d, 0x31, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x36, 0x37, 0x37, 0x37, 0x32, 0x31,
	0x36, 0x52, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x58, 0x0a, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0xfa, 0xc7, 0x31, 0x0d, 0x31, 0x30,
	0x32, 0x34, 0x2d, 0x31, 0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x36, 0x52, 0x0e, 0x73, 0x6f, 0x72,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a, 0x34, 0x30,
	0x30, 0x2d, 0x35, 0x32, 0x34, 0x32, 0x38, 0x38, 0x52, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x55,
	0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a, 0x34, 0x30, 0x30, 0x2d, 0x35,
	0x32, 0x34, 0x32, 0x38, 0x38, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x62, 0x0a, 0x1a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x31, 0x2d, 0x33, 0x32,
	0x52, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x1f, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x62, 0x0a, 0x18,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0xc7, 0x31,
	0x07, 0x31, 0x2d, 0x36, 0x35, 0x35, 0x33, 0x35, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x5c, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0xc7,
	0x31, 0x07, 0x31, 0x2d, 0x36, 0x35, 0x35, 0x33, 0x35, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x48,
	0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x34, 0x30, 0x39, 0x36, 0x52, 0x0a, 0x73, 0x79,
	0x6e, 0x63, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x12, 0x5a, 0x0a, 0x11, 0x62, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x11, 0xfa, 0xc7, 0x31, 0x0d, 0x34, 0x30, 0x39, 0x36, 0x2d, 0x36, 0x37, 0x31, 0x30, 0x38,
	0x38, 0x36, 0x34, 0x52, 0x0f, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x6e, 0x0a, 0x1e, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0xc7, 0x31, 0x09, 0x30,
	0x2d, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x1a, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x69, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x38, 0x5f, 0x30,
	0x2e, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x6f, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x0e, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x6f, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x5a, 0x0a, 0x1c, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x18, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x6f, 0x77, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x7b, 0x0a, 0x29, 0x72,
	0x70, 0x6c, 0x5f, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x6c, 0x61,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0xc7, 0x31,
	0x03, 0x31, 0x2d, 0x32, 0x52, 0x22, 0x72, 0x70, 0x6c, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e,
	0x63, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x6c,
	0x61, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x72, 0x0a, 0x13, 0x73, 0x6c, 0x61, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x38, 0x5f, 0x30, 0x2e, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x73, 0x6c, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x16,
	0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x30,
	0x2d, 0x36, 0x34, 0x52, 0x14, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0d, 0xfa, 0xc7, 0x31, 0x09, 0x30, 0x2d, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37, 0x36,
	0x52, 0x0f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x73, 0x0a, 0x19, 0x6d, 0x64, 0x62, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x1b, 0xfa, 0xc7, 0x31, 0x17, 0x31, 0x30, 0x37, 0x33, 0x37, 0x34, 0x31, 0x38, 0x32,
	0x34, 0x2d, 0x31, 0x30, 0x37, 0x33, 0x37, 0x34, 0x31, 0x38, 0x32, 0x34, 0x30, 0x30, 0x52, 0x16,
	0x6d, 0x64, 0x62, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x69, 0x6e, 0x6c, 0x6f,
	0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x88, 0x04, 0x0a, 0x07, 0x53, 0x51, 0x4c, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x51, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4e, 0x53, 0x49, 0x5f, 0x51, 0x55, 0x4f,
	0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x5f, 0x5a,
	0x45, 0x52, 0x4f, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x05,
	0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4e,
	0x4f, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x45, 0x53, 0x43, 0x41,
	0x50, 0x45, 0x53, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x45, 0x4e, 0x47, 0x49,
	0x4e, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x08, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44,
	0x5f, 0x53, 0x55, 0x42, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0a,
	0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x49, 0x4e, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x10, 0x0f, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x41, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x49,
	0x50, 0x45, 0x53, 0x5f, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x10, 0x11, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x41, 0x53, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54,
	0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53,
	0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x15,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x4e, 0x53, 0x49, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52,
	0x41, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x4e,
	0x4f, 0x5f, 0x44, 0x49, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0x18, 0x22, 0x74, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x43, 0x48, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x22, 0x78, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45,
	0x50, 0x45, 0x41, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x03, 0x22, 0x55, 0x0a, 0x0e, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x6f, 0x77, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x49, 0x4e, 0x4c, 0x4f, 0x47, 0x5f, 0x52, 0x4f,
	0x57, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x4f, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x03, 0x22, 0x59, 0x0a, 0x11, 0x53, 0x6c, 0x61, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x02, 0x22, 0x9c, 0x02, 0x0a, 0x11, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x38, 0x5f, 0x30, 0x12, 0x5b, 0x0a, 0x10, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x38, 0x5f, 0x30, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x38, 0x5f, 0x30, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x0e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x38, 0x5f, 0x30, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x72, 0x0a, 0x24, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x64, 0x62,
	0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x3b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescData = file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDesc
)

func file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDescData
}

var file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_goTypes = []interface{}{
	(MysqlConfig8_0_SQLMode)(0),              // 0: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode
	(MysqlConfig8_0_AuthPlugin)(0),           // 1: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin
	(MysqlConfig8_0_TransactionIsolation)(0), // 2: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation
	(MysqlConfig8_0_BinlogRowImage)(0),       // 3: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage
	(MysqlConfig8_0_SlaveParallelType)(0),    // 4: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType
	(*MysqlConfig8_0)(nil),                   // 5: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0
	(*MysqlConfigSet8_0)(nil),                // 6: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0
	(*wrappers.Int64Value)(nil),              // 7: google.protobuf.Int64Value
	(*wrappers.DoubleValue)(nil),             // 8: google.protobuf.DoubleValue
	(*wrappers.BoolValue)(nil),               // 9: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_depIdxs = []int32{
	7,  // 0: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_buffer_pool_size:type_name -> google.protobuf.Int64Value
	7,  // 1: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.max_connections:type_name -> google.protobuf.Int64Value
	8,  // 2: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.long_query_time:type_name -> google.protobuf.DoubleValue
	9,  // 3: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.general_log:type_name -> google.protobuf.BoolValue
	9,  // 4: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.audit_log:type_name -> google.protobuf.BoolValue
	0,  // 5: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.sql_mode:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode
	7,  // 6: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.max_allowed_packet:type_name -> google.protobuf.Int64Value
	1,  // 7: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.default_authentication_plugin:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin
	7,  // 8: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_flush_log_at_trx_commit:type_name -> google.protobuf.Int64Value
	7,  // 9: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_lock_wait_timeout:type_name -> google.protobuf.Int64Value
	2,  // 10: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.transaction_isolation:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation
	9,  // 11: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_print_all_deadlocks:type_name -> google.protobuf.BoolValue
	7,  // 12: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.net_read_timeout:type_name -> google.protobuf.Int64Value
	7,  // 13: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.net_write_timeout:type_name -> google.protobuf.Int64Value
	7,  // 14: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.group_concat_max_len:type_name -> google.protobuf.Int64Value
	7,  // 15: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.tmp_table_size:type_name -> google.protobuf.Int64Value
	7,  // 16: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.max_heap_table_size:type_name -> google.protobuf.Int64Value
	9,  // 17: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_adaptive_hash_index:type_name -> google.protobuf.BoolValue
	9,  // 18: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_numa_interleave:type_name -> google.protobuf.BoolValue
	7,  // 19: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_log_buffer_size:type_name -> google.protobuf.Int64Value
	7,  // 20: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_log_file_size:type_name -> google.protobuf.Int64Value
	7,  // 21: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_io_capacity:type_name -> google.protobuf.Int64Value
	7,  // 22: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_io_capacity_max:type_name -> google.protobuf.Int64Value
	7,  // 23: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_read_io_threads:type_name -> google.protobuf.Int64Value
	7,  // 24: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_write_io_threads:type_name -> google.protobuf.Int64Value
	7,  // 25: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_purge_threads:type_name -> google.protobuf.Int64Value
	7,  // 26: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_thread_concurrency:type_name -> google.protobuf.Int64Value
	7,  // 27: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.innodb_temp_data_file_max_size:type_name -> google.protobuf.Int64Value
	7,  // 28: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.thread_cache_size:type_name -> google.protobuf.Int64Value
	7,  // 29: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.thread_stack:type_name -> google.protobuf.Int64Value
	7,  // 30: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.join_buffer_size:type_name -> google.protobuf.Int64Value
	7,  // 31: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.sort_buffer_size:type_name -> google.protobuf.Int64Value
	7,  // 32: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.table_definition_cache:type_name -> google.protobuf.Int64Value
	7,  // 33: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.table_open_cache:type_name -> google.protobuf.Int64Value
	7,  // 34: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.table_open_cache_instances:type_name -> google.protobuf.Int64Value
	9,  // 35: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.explicit_defaults_for_timestamp:type_name -> google.protobuf.BoolValue
	7,  // 36: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.auto_increment_increment:type_name -> google.protobuf.Int64Value
	7,  // 37: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.auto_increment_offset:type_name -> google.protobuf.Int64Value
	7,  // 38: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.sync_binlog:type_name -> google.protobuf.Int64Value
	7,  // 39: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.binlog_cache_size:type_name -> google.protobuf.Int64Value
	7,  // 40: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.binlog_group_commit_sync_delay:type_name -> google.protobuf.Int64Value
	3,  // 41: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.binlog_row_image:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage
	9,  // 42: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.binlog_rows_query_log_events:type_name -> google.protobuf.BoolValue
	7,  // 43: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.rpl_semi_sync_master_wait_for_slave_count:type_name -> google.protobuf.Int64Value
	4,  // 44: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.slave_parallel_type:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType
	7,  // 45: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.slave_parallel_workers:type_name -> google.protobuf.Int64Value
	7,  // 46: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.regexp_time_limit:type_name -> google.protobuf.Int64Value
	7,  // 47: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.mdb_preserve_binlog_bytes:type_name -> google.protobuf.Int64Value
	5,  // 48: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0.effective_config:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0
	5,  // 49: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0.user_config:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0
	5,  // 50: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0.default_config:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_init() }
func file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_init() {
	if File_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlConfig8_0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlConfigSet8_0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto = out.File
	file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_rawDesc = nil
	file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_goTypes = nil
	file_yandex_cloud_mdb_mysql_v1_config_mysql8_0_proto_depIdxs = nil
}
