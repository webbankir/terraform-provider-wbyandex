// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: yandex/cloud/containerregistry/v1/lifecycle_policy_service.proto

package containerregistry

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetLifecyclePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecyclePolicyId string `protobuf:"bytes,1,opt,name=lifecycle_policy_id,json=lifecyclePolicyId,proto3" json:"lifecycle_policy_id,omitempty"`
}

func (x *GetLifecyclePolicyRequest) Reset() {
	*x = GetLifecyclePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLifecyclePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLifecyclePolicyRequest) ProtoMessage() {}

func (x *GetLifecyclePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLifecyclePolicyRequest.ProtoReflect.Descriptor instead.
func (*GetLifecyclePolicyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetLifecyclePolicyRequest) GetLifecyclePolicyId() string {
	if x != nil {
		return x.LifecyclePolicyId
	}
	return ""
}

type ListLifecyclePoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//	*ListLifecyclePoliciesRequest_RegistryId
	//	*ListLifecyclePoliciesRequest_RepositoryId
	Id        isListLifecyclePoliciesRequest_Id `protobuf_oneof:"id"`
	PageSize  int64                             `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string                            `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Filter    string                            `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy   string                            `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListLifecyclePoliciesRequest) Reset() {
	*x = ListLifecyclePoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLifecyclePoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLifecyclePoliciesRequest) ProtoMessage() {}

func (x *ListLifecyclePoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLifecyclePoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListLifecyclePoliciesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{1}
}

func (m *ListLifecyclePoliciesRequest) GetId() isListLifecyclePoliciesRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *ListLifecyclePoliciesRequest) GetRegistryId() string {
	if x, ok := x.GetId().(*ListLifecyclePoliciesRequest_RegistryId); ok {
		return x.RegistryId
	}
	return ""
}

func (x *ListLifecyclePoliciesRequest) GetRepositoryId() string {
	if x, ok := x.GetId().(*ListLifecyclePoliciesRequest_RepositoryId); ok {
		return x.RepositoryId
	}
	return ""
}

func (x *ListLifecyclePoliciesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLifecyclePoliciesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListLifecyclePoliciesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListLifecyclePoliciesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type isListLifecyclePoliciesRequest_Id interface {
	isListLifecyclePoliciesRequest_Id()
}

type ListLifecyclePoliciesRequest_RegistryId struct {
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3,oneof"`
}

type ListLifecyclePoliciesRequest_RepositoryId struct {
	RepositoryId string `protobuf:"bytes,6,opt,name=repository_id,json=repositoryId,proto3,oneof"`
}

func (*ListLifecyclePoliciesRequest_RegistryId) isListLifecyclePoliciesRequest_Id() {}

func (*ListLifecyclePoliciesRequest_RepositoryId) isListLifecyclePoliciesRequest_Id() {}

type ListLifecyclePoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecyclePolicies []*LifecyclePolicy `protobuf:"bytes,1,rep,name=lifecycle_policies,json=lifecyclePolicies,proto3" json:"lifecycle_policies,omitempty"`
	NextPageToken     string             `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListLifecyclePoliciesResponse) Reset() {
	*x = ListLifecyclePoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLifecyclePoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLifecyclePoliciesResponse) ProtoMessage() {}

func (x *ListLifecyclePoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLifecyclePoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListLifecyclePoliciesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListLifecyclePoliciesResponse) GetLifecyclePolicies() []*LifecyclePolicy {
	if x != nil {
		return x.LifecyclePolicies
	}
	return nil
}

func (x *ListLifecyclePoliciesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateLifecyclePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId string                 `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status       LifecyclePolicy_Status `protobuf:"varint,4,opt,name=status,proto3,enum=yandex.cloud.containerregistry.v1.LifecyclePolicy_Status" json:"status,omitempty"`
	Rules        []*LifecycleRule       `protobuf:"bytes,5,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *CreateLifecyclePolicyRequest) Reset() {
	*x = CreateLifecyclePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLifecyclePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLifecyclePolicyRequest) ProtoMessage() {}

func (x *CreateLifecyclePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLifecyclePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateLifecyclePolicyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateLifecyclePolicyRequest) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *CreateLifecyclePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateLifecyclePolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateLifecyclePolicyRequest) GetStatus() LifecyclePolicy_Status {
	if x != nil {
		return x.Status
	}
	return LifecyclePolicy_STATUS_UNSPECIFIED
}

func (x *CreateLifecyclePolicyRequest) GetRules() []*LifecycleRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type UpdateLifecyclePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecyclePolicyId string                 `protobuf:"bytes,1,opt,name=lifecycle_policy_id,json=lifecyclePolicyId,proto3" json:"lifecycle_policy_id,omitempty"`
	UpdateMask        *field_mask.FieldMask  `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	Name              string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description       string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status            LifecyclePolicy_Status `protobuf:"varint,5,opt,name=status,proto3,enum=yandex.cloud.containerregistry.v1.LifecyclePolicy_Status" json:"status,omitempty"`
	Rules             []*LifecycleRule       `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *UpdateLifecyclePolicyRequest) Reset() {
	*x = UpdateLifecyclePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLifecyclePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLifecyclePolicyRequest) ProtoMessage() {}

func (x *UpdateLifecyclePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLifecyclePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateLifecyclePolicyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateLifecyclePolicyRequest) GetLifecyclePolicyId() string {
	if x != nil {
		return x.LifecyclePolicyId
	}
	return ""
}

func (x *UpdateLifecyclePolicyRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateLifecyclePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLifecyclePolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateLifecyclePolicyRequest) GetStatus() LifecyclePolicy_Status {
	if x != nil {
		return x.Status
	}
	return LifecyclePolicy_STATUS_UNSPECIFIED
}

func (x *UpdateLifecyclePolicyRequest) GetRules() []*LifecycleRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type DeleteLifecyclePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecyclePolicyId string `protobuf:"bytes,1,opt,name=lifecycle_policy_id,json=lifecyclePolicyId,proto3" json:"lifecycle_policy_id,omitempty"`
}

func (x *DeleteLifecyclePolicyRequest) Reset() {
	*x = DeleteLifecyclePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLifecyclePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLifecyclePolicyRequest) ProtoMessage() {}

func (x *DeleteLifecyclePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLifecyclePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteLifecyclePolicyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteLifecyclePolicyRequest) GetLifecyclePolicyId() string {
	if x != nil {
		return x.LifecyclePolicyId
	}
	return ""
}

type CreateLifecyclePolicyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecyclePolicyId string `protobuf:"bytes,1,opt,name=lifecycle_policy_id,json=lifecyclePolicyId,proto3" json:"lifecycle_policy_id,omitempty"`
}

func (x *CreateLifecyclePolicyMetadata) Reset() {
	*x = CreateLifecyclePolicyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLifecyclePolicyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLifecyclePolicyMetadata) ProtoMessage() {}

func (x *CreateLifecyclePolicyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLifecyclePolicyMetadata.ProtoReflect.Descriptor instead.
func (*CreateLifecyclePolicyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateLifecyclePolicyMetadata) GetLifecyclePolicyId() string {
	if x != nil {
		return x.LifecyclePolicyId
	}
	return ""
}

type UpdateLifecyclePolicyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecyclePolicyId string `protobuf:"bytes,1,opt,name=lifecycle_policy_id,json=lifecyclePolicyId,proto3" json:"lifecycle_policy_id,omitempty"`
}

func (x *UpdateLifecyclePolicyMetadata) Reset() {
	*x = UpdateLifecyclePolicyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLifecyclePolicyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLifecyclePolicyMetadata) ProtoMessage() {}

func (x *UpdateLifecyclePolicyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLifecyclePolicyMetadata.ProtoReflect.Descriptor instead.
func (*UpdateLifecyclePolicyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateLifecyclePolicyMetadata) GetLifecyclePolicyId() string {
	if x != nil {
		return x.LifecyclePolicyId
	}
	return ""
}

type DeleteLifecyclePolicyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecyclePolicyId string `protobuf:"bytes,1,opt,name=lifecycle_policy_id,json=lifecyclePolicyId,proto3" json:"lifecycle_policy_id,omitempty"`
}

func (x *DeleteLifecyclePolicyMetadata) Reset() {
	*x = DeleteLifecyclePolicyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLifecyclePolicyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLifecyclePolicyMetadata) ProtoMessage() {}

func (x *DeleteLifecyclePolicyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLifecyclePolicyMetadata.ProtoReflect.Descriptor instead.
func (*DeleteLifecyclePolicyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteLifecyclePolicyMetadata) GetLifecyclePolicyId() string {
	if x != nil {
		return x.LifecyclePolicyId
	}
	return ""
}

type DryRunLifecyclePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecyclePolicyId string `protobuf:"bytes,1,opt,name=lifecycle_policy_id,json=lifecyclePolicyId,proto3" json:"lifecycle_policy_id,omitempty"`
}

func (x *DryRunLifecyclePolicyRequest) Reset() {
	*x = DryRunLifecyclePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunLifecyclePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunLifecyclePolicyRequest) ProtoMessage() {}

func (x *DryRunLifecyclePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunLifecyclePolicyRequest.ProtoReflect.Descriptor instead.
func (*DryRunLifecyclePolicyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{9}
}

func (x *DryRunLifecyclePolicyRequest) GetLifecyclePolicyId() string {
	if x != nil {
		return x.LifecyclePolicyId
	}
	return ""
}

type DryRunLifecyclePolicyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DryRunLifecyclePolicyResultId string `protobuf:"bytes,1,opt,name=dry_run_lifecycle_policy_result_id,json=dryRunLifecyclePolicyResultId,proto3" json:"dry_run_lifecycle_policy_result_id,omitempty"`
	LifecyclePolicyId             string `protobuf:"bytes,2,opt,name=lifecycle_policy_id,json=lifecyclePolicyId,proto3" json:"lifecycle_policy_id,omitempty"`
}

func (x *DryRunLifecyclePolicyMetadata) Reset() {
	*x = DryRunLifecyclePolicyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunLifecyclePolicyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunLifecyclePolicyMetadata) ProtoMessage() {}

func (x *DryRunLifecyclePolicyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunLifecyclePolicyMetadata.ProtoReflect.Descriptor instead.
func (*DryRunLifecyclePolicyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{10}
}

func (x *DryRunLifecyclePolicyMetadata) GetDryRunLifecyclePolicyResultId() string {
	if x != nil {
		return x.DryRunLifecyclePolicyResultId
	}
	return ""
}

func (x *DryRunLifecyclePolicyMetadata) GetLifecyclePolicyId() string {
	if x != nil {
		return x.LifecyclePolicyId
	}
	return ""
}

type DryRunLifecyclePolicyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DryRunLifecyclePolicyResultId string               `protobuf:"bytes,1,opt,name=dry_run_lifecycle_policy_result_id,json=dryRunLifecyclePolicyResultId,proto3" json:"dry_run_lifecycle_policy_result_id,omitempty"`
	LifecyclePolicyId             string               `protobuf:"bytes,2,opt,name=lifecycle_policy_id,json=lifecyclePolicyId,proto3" json:"lifecycle_policy_id,omitempty"`
	RunAt                         *timestamp.Timestamp `protobuf:"bytes,3,opt,name=run_at,json=runAt,proto3" json:"run_at,omitempty"`
	AffectedImagesCount           int64                `protobuf:"varint,4,opt,name=affected_images_count,json=affectedImagesCount,proto3" json:"affected_images_count,omitempty"`
}

func (x *DryRunLifecyclePolicyResult) Reset() {
	*x = DryRunLifecyclePolicyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunLifecyclePolicyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunLifecyclePolicyResult) ProtoMessage() {}

func (x *DryRunLifecyclePolicyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunLifecyclePolicyResult.ProtoReflect.Descriptor instead.
func (*DryRunLifecyclePolicyResult) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{11}
}

func (x *DryRunLifecyclePolicyResult) GetDryRunLifecyclePolicyResultId() string {
	if x != nil {
		return x.DryRunLifecyclePolicyResultId
	}
	return ""
}

func (x *DryRunLifecyclePolicyResult) GetLifecyclePolicyId() string {
	if x != nil {
		return x.LifecyclePolicyId
	}
	return ""
}

func (x *DryRunLifecyclePolicyResult) GetRunAt() *timestamp.Timestamp {
	if x != nil {
		return x.RunAt
	}
	return nil
}

func (x *DryRunLifecyclePolicyResult) GetAffectedImagesCount() int64 {
	if x != nil {
		return x.AffectedImagesCount
	}
	return 0
}

type GetDryRunLifecyclePolicyResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DryRunLifecyclePolicyResultId string `protobuf:"bytes,1,opt,name=dry_run_lifecycle_policy_result_id,json=dryRunLifecyclePolicyResultId,proto3" json:"dry_run_lifecycle_policy_result_id,omitempty"`
}

func (x *GetDryRunLifecyclePolicyResultRequest) Reset() {
	*x = GetDryRunLifecyclePolicyResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDryRunLifecyclePolicyResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDryRunLifecyclePolicyResultRequest) ProtoMessage() {}

func (x *GetDryRunLifecyclePolicyResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDryRunLifecyclePolicyResultRequest.ProtoReflect.Descriptor instead.
func (*GetDryRunLifecyclePolicyResultRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetDryRunLifecyclePolicyResultRequest) GetDryRunLifecyclePolicyResultId() string {
	if x != nil {
		return x.DryRunLifecyclePolicyResultId
	}
	return ""
}

type ListDryRunLifecyclePolicyResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecyclePolicyId string `protobuf:"bytes,1,opt,name=lifecycle_policy_id,json=lifecyclePolicyId,proto3" json:"lifecycle_policy_id,omitempty"`
	PageSize          int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken         string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Filter            string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy           string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListDryRunLifecyclePolicyResultsRequest) Reset() {
	*x = ListDryRunLifecyclePolicyResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDryRunLifecyclePolicyResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDryRunLifecyclePolicyResultsRequest) ProtoMessage() {}

func (x *ListDryRunLifecyclePolicyResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDryRunLifecyclePolicyResultsRequest.ProtoReflect.Descriptor instead.
func (*ListDryRunLifecyclePolicyResultsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListDryRunLifecyclePolicyResultsRequest) GetLifecyclePolicyId() string {
	if x != nil {
		return x.LifecyclePolicyId
	}
	return ""
}

func (x *ListDryRunLifecyclePolicyResultsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDryRunLifecyclePolicyResultsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDryRunLifecyclePolicyResultsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDryRunLifecyclePolicyResultsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListDryRunLifecyclePolicyResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DryRunLifecyclePolicyResults []*DryRunLifecyclePolicyResult `protobuf:"bytes,1,rep,name=dry_run_lifecycle_policy_results,json=dryRunLifecyclePolicyResults,proto3" json:"dry_run_lifecycle_policy_results,omitempty"`
	NextPageToken                string                         `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDryRunLifecyclePolicyResultsResponse) Reset() {
	*x = ListDryRunLifecyclePolicyResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDryRunLifecyclePolicyResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDryRunLifecyclePolicyResultsResponse) ProtoMessage() {}

func (x *ListDryRunLifecyclePolicyResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDryRunLifecyclePolicyResultsResponse.ProtoReflect.Descriptor instead.
func (*ListDryRunLifecyclePolicyResultsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListDryRunLifecyclePolicyResultsResponse) GetDryRunLifecyclePolicyResults() []*DryRunLifecyclePolicyResult {
	if x != nil {
		return x.DryRunLifecyclePolicyResults
	}
	return nil
}

func (x *ListDryRunLifecyclePolicyResultsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListDryRunLifecyclePolicyResultAffectedImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DryRunLifecyclePolicyResultId string `protobuf:"bytes,1,opt,name=dry_run_lifecycle_policy_result_id,json=dryRunLifecyclePolicyResultId,proto3" json:"dry_run_lifecycle_policy_result_id,omitempty"`
	PageSize                      int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken                     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Filter                        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy                       string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesRequest) Reset() {
	*x = ListDryRunLifecyclePolicyResultAffectedImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDryRunLifecyclePolicyResultAffectedImagesRequest) ProtoMessage() {}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDryRunLifecyclePolicyResultAffectedImagesRequest.ProtoReflect.Descriptor instead.
func (*ListDryRunLifecyclePolicyResultAffectedImagesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesRequest) GetDryRunLifecyclePolicyResultId() string {
	if x != nil {
		return x.DryRunLifecyclePolicyResultId
	}
	return ""
}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListDryRunLifecyclePolicyResultAffectedImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AffectedImages []*Image `protobuf:"bytes,1,rep,name=affected_images,json=affectedImages,proto3" json:"affected_images,omitempty"`
	NextPageToken  string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesResponse) Reset() {
	*x = ListDryRunLifecyclePolicyResultAffectedImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDryRunLifecyclePolicyResultAffectedImagesResponse) ProtoMessage() {}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDryRunLifecyclePolicyResultAffectedImagesResponse.ProtoReflect.Descriptor instead.
func (*ListDryRunLifecyclePolicyResultAffectedImagesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesResponse) GetAffectedImages() []*Image {
	if x != nil {
		return x.AffectedImages
	}
	return nil
}

func (x *ListDryRunLifecyclePolicyResultAffectedImagesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDesc = []byte{
	0x0a, 0x40, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x21, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x26, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x11, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31,
	0x04, 0x3c, 0x3d, 0x35, 0x30, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04,
	0x3c, 0x3d, 0x35, 0x30, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31,
	0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x31,
	0x30, 0x30, 0x30, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a,
	0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x42, 0x0a, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0xaa, 0x01,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x61, 0x0a, 0x12, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x11, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd6, 0x02, 0x0a, 0x1c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xf2, 0xc7,
	0x31, 0x1d, 0x7c, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x31, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05,
	0x3c, 0x3d, 0x32, 0x35, 0x36, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0xe8,
	0xc7, 0x31, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0x9e, 0x03, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52,
	0x11, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xf2,
	0xc7, 0x31, 0x1d, 0x7c, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x7b, 0x31, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31,
	0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52,
	0x11, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x1c, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x11, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x1d, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x22, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1d, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64,
	0x22, 0xff, 0x01, 0x0a, 0x1b, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x49, 0x0a, 0x22, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x64, 0x72,
	0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x75, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x41, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x22,
	0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8,
	0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x1d, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72,
	0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x11, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8,
	0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d,
	0x31, 0x30, 0x30, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xdb, 0x01, 0x0a,
	0x28, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x20, 0x64, 0x72,
	0x79, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x1c, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xac, 0x02, 0x0a, 0x34, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x22, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x1d, 0x64,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c,
	0x3d, 0x31, 0x30, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x35, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xe6,
	0x0b, 0x0a, 0x16, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa2,
	0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0xb2,
	0xd2, 0x2a, 0x30, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x0f, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0xa2, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x34, 0xb2, 0xd2, 0x2a, 0x30, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0f, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xa8, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0xb2, 0xd2, 0x2a, 0x36, 0x0a, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0xae, 0x01, 0x0a, 0x06, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x3f,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x40, 0xb2, 0xd2, 0x2a, 0x3c, 0x0a, 0x1d, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x72, 0x79, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0xac, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0xd3, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x57, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x58, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x80, 0x01, 0x0a, 0x25, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x5a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescData = file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDesc
)

func file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescData)
	})
	return file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDescData
}

var file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_goTypes = []interface{}{
	(*GetLifecyclePolicyRequest)(nil),                             // 0: yandex.cloud.containerregistry.v1.GetLifecyclePolicyRequest
	(*ListLifecyclePoliciesRequest)(nil),                          // 1: yandex.cloud.containerregistry.v1.ListLifecyclePoliciesRequest
	(*ListLifecyclePoliciesResponse)(nil),                         // 2: yandex.cloud.containerregistry.v1.ListLifecyclePoliciesResponse
	(*CreateLifecyclePolicyRequest)(nil),                          // 3: yandex.cloud.containerregistry.v1.CreateLifecyclePolicyRequest
	(*UpdateLifecyclePolicyRequest)(nil),                          // 4: yandex.cloud.containerregistry.v1.UpdateLifecyclePolicyRequest
	(*DeleteLifecyclePolicyRequest)(nil),                          // 5: yandex.cloud.containerregistry.v1.DeleteLifecyclePolicyRequest
	(*CreateLifecyclePolicyMetadata)(nil),                         // 6: yandex.cloud.containerregistry.v1.CreateLifecyclePolicyMetadata
	(*UpdateLifecyclePolicyMetadata)(nil),                         // 7: yandex.cloud.containerregistry.v1.UpdateLifecyclePolicyMetadata
	(*DeleteLifecyclePolicyMetadata)(nil),                         // 8: yandex.cloud.containerregistry.v1.DeleteLifecyclePolicyMetadata
	(*DryRunLifecyclePolicyRequest)(nil),                          // 9: yandex.cloud.containerregistry.v1.DryRunLifecyclePolicyRequest
	(*DryRunLifecyclePolicyMetadata)(nil),                         // 10: yandex.cloud.containerregistry.v1.DryRunLifecyclePolicyMetadata
	(*DryRunLifecyclePolicyResult)(nil),                           // 11: yandex.cloud.containerregistry.v1.DryRunLifecyclePolicyResult
	(*GetDryRunLifecyclePolicyResultRequest)(nil),                 // 12: yandex.cloud.containerregistry.v1.GetDryRunLifecyclePolicyResultRequest
	(*ListDryRunLifecyclePolicyResultsRequest)(nil),               // 13: yandex.cloud.containerregistry.v1.ListDryRunLifecyclePolicyResultsRequest
	(*ListDryRunLifecyclePolicyResultsResponse)(nil),              // 14: yandex.cloud.containerregistry.v1.ListDryRunLifecyclePolicyResultsResponse
	(*ListDryRunLifecyclePolicyResultAffectedImagesRequest)(nil),  // 15: yandex.cloud.containerregistry.v1.ListDryRunLifecyclePolicyResultAffectedImagesRequest
	(*ListDryRunLifecyclePolicyResultAffectedImagesResponse)(nil), // 16: yandex.cloud.containerregistry.v1.ListDryRunLifecyclePolicyResultAffectedImagesResponse
	(*LifecyclePolicy)(nil),                                       // 17: yandex.cloud.containerregistry.v1.LifecyclePolicy
	(LifecyclePolicy_Status)(0),                                   // 18: yandex.cloud.containerregistry.v1.LifecyclePolicy.Status
	(*LifecycleRule)(nil),                                         // 19: yandex.cloud.containerregistry.v1.LifecycleRule
	(*field_mask.FieldMask)(nil),                                  // 20: google.protobuf.FieldMask
	(*timestamp.Timestamp)(nil),                                   // 21: google.protobuf.Timestamp
	(*Image)(nil),                                                 // 22: yandex.cloud.containerregistry.v1.Image
	(*operation.Operation)(nil),                                   // 23: yandex.cloud.operation.Operation
}
var file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_depIdxs = []int32{
	17, // 0: yandex.cloud.containerregistry.v1.ListLifecyclePoliciesResponse.lifecycle_policies:type_name -> yandex.cloud.containerregistry.v1.LifecyclePolicy
	18, // 1: yandex.cloud.containerregistry.v1.CreateLifecyclePolicyRequest.status:type_name -> yandex.cloud.containerregistry.v1.LifecyclePolicy.Status
	19, // 2: yandex.cloud.containerregistry.v1.CreateLifecyclePolicyRequest.rules:type_name -> yandex.cloud.containerregistry.v1.LifecycleRule
	20, // 3: yandex.cloud.containerregistry.v1.UpdateLifecyclePolicyRequest.update_mask:type_name -> google.protobuf.FieldMask
	18, // 4: yandex.cloud.containerregistry.v1.UpdateLifecyclePolicyRequest.status:type_name -> yandex.cloud.containerregistry.v1.LifecyclePolicy.Status
	19, // 5: yandex.cloud.containerregistry.v1.UpdateLifecyclePolicyRequest.rules:type_name -> yandex.cloud.containerregistry.v1.LifecycleRule
	21, // 6: yandex.cloud.containerregistry.v1.DryRunLifecyclePolicyResult.run_at:type_name -> google.protobuf.Timestamp
	11, // 7: yandex.cloud.containerregistry.v1.ListDryRunLifecyclePolicyResultsResponse.dry_run_lifecycle_policy_results:type_name -> yandex.cloud.containerregistry.v1.DryRunLifecyclePolicyResult
	22, // 8: yandex.cloud.containerregistry.v1.ListDryRunLifecyclePolicyResultAffectedImagesResponse.affected_images:type_name -> yandex.cloud.containerregistry.v1.Image
	0,  // 9: yandex.cloud.containerregistry.v1.LifecyclePolicyService.Get:input_type -> yandex.cloud.containerregistry.v1.GetLifecyclePolicyRequest
	1,  // 10: yandex.cloud.containerregistry.v1.LifecyclePolicyService.List:input_type -> yandex.cloud.containerregistry.v1.ListLifecyclePoliciesRequest
	3,  // 11: yandex.cloud.containerregistry.v1.LifecyclePolicyService.Create:input_type -> yandex.cloud.containerregistry.v1.CreateLifecyclePolicyRequest
	4,  // 12: yandex.cloud.containerregistry.v1.LifecyclePolicyService.Update:input_type -> yandex.cloud.containerregistry.v1.UpdateLifecyclePolicyRequest
	5,  // 13: yandex.cloud.containerregistry.v1.LifecyclePolicyService.Delete:input_type -> yandex.cloud.containerregistry.v1.DeleteLifecyclePolicyRequest
	9,  // 14: yandex.cloud.containerregistry.v1.LifecyclePolicyService.DryRun:input_type -> yandex.cloud.containerregistry.v1.DryRunLifecyclePolicyRequest
	12, // 15: yandex.cloud.containerregistry.v1.LifecyclePolicyService.GetDryRunResult:input_type -> yandex.cloud.containerregistry.v1.GetDryRunLifecyclePolicyResultRequest
	13, // 16: yandex.cloud.containerregistry.v1.LifecyclePolicyService.ListDryRunResults:input_type -> yandex.cloud.containerregistry.v1.ListDryRunLifecyclePolicyResultsRequest
	15, // 17: yandex.cloud.containerregistry.v1.LifecyclePolicyService.ListDryRunResultAffectedImages:input_type -> yandex.cloud.containerregistry.v1.ListDryRunLifecyclePolicyResultAffectedImagesRequest
	17, // 18: yandex.cloud.containerregistry.v1.LifecyclePolicyService.Get:output_type -> yandex.cloud.containerregistry.v1.LifecyclePolicy
	2,  // 19: yandex.cloud.containerregistry.v1.LifecyclePolicyService.List:output_type -> yandex.cloud.containerregistry.v1.ListLifecyclePoliciesResponse
	23, // 20: yandex.cloud.containerregistry.v1.LifecyclePolicyService.Create:output_type -> yandex.cloud.operation.Operation
	23, // 21: yandex.cloud.containerregistry.v1.LifecyclePolicyService.Update:output_type -> yandex.cloud.operation.Operation
	23, // 22: yandex.cloud.containerregistry.v1.LifecyclePolicyService.Delete:output_type -> yandex.cloud.operation.Operation
	23, // 23: yandex.cloud.containerregistry.v1.LifecyclePolicyService.DryRun:output_type -> yandex.cloud.operation.Operation
	11, // 24: yandex.cloud.containerregistry.v1.LifecyclePolicyService.GetDryRunResult:output_type -> yandex.cloud.containerregistry.v1.DryRunLifecyclePolicyResult
	14, // 25: yandex.cloud.containerregistry.v1.LifecyclePolicyService.ListDryRunResults:output_type -> yandex.cloud.containerregistry.v1.ListDryRunLifecyclePolicyResultsResponse
	16, // 26: yandex.cloud.containerregistry.v1.LifecyclePolicyService.ListDryRunResultAffectedImages:output_type -> yandex.cloud.containerregistry.v1.ListDryRunLifecyclePolicyResultAffectedImagesResponse
	18, // [18:27] is the sub-list for method output_type
	9,  // [9:18] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_init() }
func file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_init() {
	if File_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto != nil {
		return
	}
	file_yandex_cloud_containerregistry_v1_image_proto_init()
	file_yandex_cloud_containerregistry_v1_lifecycle_policy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLifecyclePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLifecyclePoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLifecyclePoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLifecyclePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLifecyclePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLifecyclePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLifecyclePolicyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLifecyclePolicyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLifecyclePolicyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunLifecyclePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunLifecyclePolicyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunLifecyclePolicyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDryRunLifecyclePolicyResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDryRunLifecyclePolicyResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDryRunLifecyclePolicyResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDryRunLifecyclePolicyResultAffectedImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDryRunLifecyclePolicyResultAffectedImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ListLifecyclePoliciesRequest_RegistryId)(nil),
		(*ListLifecyclePoliciesRequest_RepositoryId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto = out.File
	file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_rawDesc = nil
	file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_goTypes = nil
	file_yandex_cloud_containerregistry_v1_lifecycle_policy_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LifecyclePolicyServiceClient is the client API for LifecyclePolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LifecyclePolicyServiceClient interface {
	Get(ctx context.Context, in *GetLifecyclePolicyRequest, opts ...grpc.CallOption) (*LifecyclePolicy, error)
	List(ctx context.Context, in *ListLifecyclePoliciesRequest, opts ...grpc.CallOption) (*ListLifecyclePoliciesResponse, error)
	Create(ctx context.Context, in *CreateLifecyclePolicyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Update(ctx context.Context, in *UpdateLifecyclePolicyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Delete(ctx context.Context, in *DeleteLifecyclePolicyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	DryRun(ctx context.Context, in *DryRunLifecyclePolicyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	GetDryRunResult(ctx context.Context, in *GetDryRunLifecyclePolicyResultRequest, opts ...grpc.CallOption) (*DryRunLifecyclePolicyResult, error)
	ListDryRunResults(ctx context.Context, in *ListDryRunLifecyclePolicyResultsRequest, opts ...grpc.CallOption) (*ListDryRunLifecyclePolicyResultsResponse, error)
	ListDryRunResultAffectedImages(ctx context.Context, in *ListDryRunLifecyclePolicyResultAffectedImagesRequest, opts ...grpc.CallOption) (*ListDryRunLifecyclePolicyResultAffectedImagesResponse, error)
}

type lifecyclePolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLifecyclePolicyServiceClient(cc grpc.ClientConnInterface) LifecyclePolicyServiceClient {
	return &lifecyclePolicyServiceClient{cc}
}

func (c *lifecyclePolicyServiceClient) Get(ctx context.Context, in *GetLifecyclePolicyRequest, opts ...grpc.CallOption) (*LifecyclePolicy, error) {
	out := new(LifecyclePolicy)
	err := c.cc.Invoke(ctx, "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecyclePolicyServiceClient) List(ctx context.Context, in *ListLifecyclePoliciesRequest, opts ...grpc.CallOption) (*ListLifecyclePoliciesResponse, error) {
	out := new(ListLifecyclePoliciesResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecyclePolicyServiceClient) Create(ctx context.Context, in *CreateLifecyclePolicyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecyclePolicyServiceClient) Update(ctx context.Context, in *UpdateLifecyclePolicyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecyclePolicyServiceClient) Delete(ctx context.Context, in *DeleteLifecyclePolicyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecyclePolicyServiceClient) DryRun(ctx context.Context, in *DryRunLifecyclePolicyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/DryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecyclePolicyServiceClient) GetDryRunResult(ctx context.Context, in *GetDryRunLifecyclePolicyResultRequest, opts ...grpc.CallOption) (*DryRunLifecyclePolicyResult, error) {
	out := new(DryRunLifecyclePolicyResult)
	err := c.cc.Invoke(ctx, "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/GetDryRunResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecyclePolicyServiceClient) ListDryRunResults(ctx context.Context, in *ListDryRunLifecyclePolicyResultsRequest, opts ...grpc.CallOption) (*ListDryRunLifecyclePolicyResultsResponse, error) {
	out := new(ListDryRunLifecyclePolicyResultsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/ListDryRunResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecyclePolicyServiceClient) ListDryRunResultAffectedImages(ctx context.Context, in *ListDryRunLifecyclePolicyResultAffectedImagesRequest, opts ...grpc.CallOption) (*ListDryRunLifecyclePolicyResultAffectedImagesResponse, error) {
	out := new(ListDryRunLifecyclePolicyResultAffectedImagesResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/ListDryRunResultAffectedImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LifecyclePolicyServiceServer is the server API for LifecyclePolicyService service.
type LifecyclePolicyServiceServer interface {
	Get(context.Context, *GetLifecyclePolicyRequest) (*LifecyclePolicy, error)
	List(context.Context, *ListLifecyclePoliciesRequest) (*ListLifecyclePoliciesResponse, error)
	Create(context.Context, *CreateLifecyclePolicyRequest) (*operation.Operation, error)
	Update(context.Context, *UpdateLifecyclePolicyRequest) (*operation.Operation, error)
	Delete(context.Context, *DeleteLifecyclePolicyRequest) (*operation.Operation, error)
	DryRun(context.Context, *DryRunLifecyclePolicyRequest) (*operation.Operation, error)
	GetDryRunResult(context.Context, *GetDryRunLifecyclePolicyResultRequest) (*DryRunLifecyclePolicyResult, error)
	ListDryRunResults(context.Context, *ListDryRunLifecyclePolicyResultsRequest) (*ListDryRunLifecyclePolicyResultsResponse, error)
	ListDryRunResultAffectedImages(context.Context, *ListDryRunLifecyclePolicyResultAffectedImagesRequest) (*ListDryRunLifecyclePolicyResultAffectedImagesResponse, error)
}

// UnimplementedLifecyclePolicyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLifecyclePolicyServiceServer struct {
}

func (*UnimplementedLifecyclePolicyServiceServer) Get(context.Context, *GetLifecyclePolicyRequest) (*LifecyclePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedLifecyclePolicyServiceServer) List(context.Context, *ListLifecyclePoliciesRequest) (*ListLifecyclePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedLifecyclePolicyServiceServer) Create(context.Context, *CreateLifecyclePolicyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedLifecyclePolicyServiceServer) Update(context.Context, *UpdateLifecyclePolicyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedLifecyclePolicyServiceServer) Delete(context.Context, *DeleteLifecyclePolicyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedLifecyclePolicyServiceServer) DryRun(context.Context, *DryRunLifecyclePolicyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DryRun not implemented")
}
func (*UnimplementedLifecyclePolicyServiceServer) GetDryRunResult(context.Context, *GetDryRunLifecyclePolicyResultRequest) (*DryRunLifecyclePolicyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDryRunResult not implemented")
}
func (*UnimplementedLifecyclePolicyServiceServer) ListDryRunResults(context.Context, *ListDryRunLifecyclePolicyResultsRequest) (*ListDryRunLifecyclePolicyResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDryRunResults not implemented")
}
func (*UnimplementedLifecyclePolicyServiceServer) ListDryRunResultAffectedImages(context.Context, *ListDryRunLifecyclePolicyResultAffectedImagesRequest) (*ListDryRunLifecyclePolicyResultAffectedImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDryRunResultAffectedImages not implemented")
}

func RegisterLifecyclePolicyServiceServer(s *grpc.Server, srv LifecyclePolicyServiceServer) {
	s.RegisterService(&_LifecyclePolicyService_serviceDesc, srv)
}

func _LifecyclePolicyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLifecyclePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecyclePolicyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecyclePolicyServiceServer).Get(ctx, req.(*GetLifecyclePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecyclePolicyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLifecyclePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecyclePolicyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecyclePolicyServiceServer).List(ctx, req.(*ListLifecyclePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecyclePolicyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLifecyclePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecyclePolicyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecyclePolicyServiceServer).Create(ctx, req.(*CreateLifecyclePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecyclePolicyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLifecyclePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecyclePolicyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecyclePolicyServiceServer).Update(ctx, req.(*UpdateLifecyclePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecyclePolicyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLifecyclePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecyclePolicyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecyclePolicyServiceServer).Delete(ctx, req.(*DeleteLifecyclePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecyclePolicyService_DryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DryRunLifecyclePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecyclePolicyServiceServer).DryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/DryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecyclePolicyServiceServer).DryRun(ctx, req.(*DryRunLifecyclePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecyclePolicyService_GetDryRunResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDryRunLifecyclePolicyResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecyclePolicyServiceServer).GetDryRunResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/GetDryRunResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecyclePolicyServiceServer).GetDryRunResult(ctx, req.(*GetDryRunLifecyclePolicyResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecyclePolicyService_ListDryRunResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDryRunLifecyclePolicyResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecyclePolicyServiceServer).ListDryRunResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/ListDryRunResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecyclePolicyServiceServer).ListDryRunResults(ctx, req.(*ListDryRunLifecyclePolicyResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecyclePolicyService_ListDryRunResultAffectedImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDryRunLifecyclePolicyResultAffectedImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecyclePolicyServiceServer).ListDryRunResultAffectedImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.containerregistry.v1.LifecyclePolicyService/ListDryRunResultAffectedImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecyclePolicyServiceServer).ListDryRunResultAffectedImages(ctx, req.(*ListDryRunLifecyclePolicyResultAffectedImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LifecyclePolicyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.containerregistry.v1.LifecyclePolicyService",
	HandlerType: (*LifecyclePolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _LifecyclePolicyService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LifecyclePolicyService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LifecyclePolicyService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LifecyclePolicyService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LifecyclePolicyService_Delete_Handler,
		},
		{
			MethodName: "DryRun",
			Handler:    _LifecyclePolicyService_DryRun_Handler,
		},
		{
			MethodName: "GetDryRunResult",
			Handler:    _LifecyclePolicyService_GetDryRunResult_Handler,
		},
		{
			MethodName: "ListDryRunResults",
			Handler:    _LifecyclePolicyService_ListDryRunResults_Handler,
		},
		{
			MethodName: "ListDryRunResultAffectedImages",
			Handler:    _LifecyclePolicyService_ListDryRunResultAffectedImages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/containerregistry/v1/lifecycle_policy_service.proto",
}
